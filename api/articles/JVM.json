{"title":"JVM","uid":"0b1381c4a63c09e41167c5168339035a","slug":"JVM","date":"2023-04-18T15:48:52.000Z","updated":"2023-04-18T15:51:00.870Z","comments":true,"path":"api/articles/JVM.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2023/04/18/24189eeb829832cd.webp","content":"<h1 id=\"JVM：Java虚拟机\"><a href=\"#JVM：Java虚拟机\" class=\"headerlink\" title=\"JVM：Java虚拟机\"></a>JVM：Java虚拟机</h1><p>Java虚拟机（Java Virtual Machine，JVM）是Java语言的核心，可以在不同的计算机上运行Java程序，实现Java语言的“一次编写，到处运行”的特性。本文将介绍JVM的核心原理和一些常用的调优技巧。</p>\n<h2 id=\"JVM的核心原理\"><a href=\"#JVM的核心原理\" class=\"headerlink\" title=\"JVM的核心原理\"></a>JVM的核心原理</h2><p>JVM是由Java语言编写的，它是一个虚拟计算机，可以将Java字节码文件解释执行或者编译成本地机器码执行。JVM的核心包括以下三个部分：</p>\n<ul>\n<li>类加载器（ClassLoader）：负责将Java字节码文件加载到JVM中，实现类的动态加载和卸载。</li>\n<li>运行时数据区（Runtime Data Area）：JVM在运行时会分配一块内存空间来存储程序运行时需要的数据，包括方法区、堆、栈、本地方法栈和程序计数器等。</li>\n<li>执行引擎：负责将解释执行或编译后的代码转换成机器码，并执行代码。</li>\n</ul>\n<p>JVM的核心原理是将Java字节码文件加载到内存中，然后通过执行引擎将字节码翻译成机器码并执行。下面我们将详细介绍JVM的各个组成部分。</p>\n<h3 id=\"类加载器（ClassLoader）\"><a href=\"#类加载器（ClassLoader）\" class=\"headerlink\" title=\"类加载器（ClassLoader）\"></a>类加载器（ClassLoader）</h3><p>JVM中的类加载器负责将Java字节码文件加载到内存中，并生成对应的类。JVM中有三种类加载器：</p>\n<ul>\n<li>根类加载器（Bootstrap ClassLoader）：负责加载JVM自身需要的类库，如Java API类库和JVM运行时需要的类库。</li>\n<li>扩展类加载器（Extension ClassLoader）：负责加载JVM扩展的类库，如Java扩展API和JVM实现厂商提供的类库。</li>\n<li>应用程序类加载器（Application ClassLoader）：负责加载应用程序中的类，包括自己编写的类和第三方库的类。</li>\n</ul>\n<p>类加载器采用的是双亲委派模型，即先让父类加载器尝试加载类，如果父类加载器无法加载，则由子类加载器加载。这样可以避免重复加载类，提高系统性能。</p>\n<h3 id=\"运行时数据区（Runtime-Data-Area）\"><a href=\"#运行时数据区（Runtime-Data-Area）\" class=\"headerlink\" title=\"运行时数据区（Runtime Data Area）\"></a>运行时数据区（Runtime Data Area）</h3><p>JVM在运行时会分配一块内存空间来存储程序运行时需要的数据。JVM的运行时数据区主要包括以下几个部分：</p>\n<ul>\n<li>方法区（Method Area）：存储类的元数据信息，如类名、方法名、字段名等。方法区是所有线程共享的内存区域。</li>\n<li>堆（Heap）：存储对象实例和数组等动态分配的内存。堆是所有线程共享的内存区域。</li>\n<li>栈（Stack）：存储线程私有的方法调用栈信息。每个线程都有自己的栈空间，用于存储方法调用的参数、返回值和局部变量等。</li>\n<li>本地方法栈（Native Method Stack）：与Java栈类似，只不过本地方法栈是为本地方法服务的。</li>\n<li>程序计数器（Program Counter）：记录当前线程正在执行的字节码指令地址。</li>\n</ul>\n<h3 id=\"执行引擎\"><a href=\"#执行引擎\" class=\"headerlink\" title=\"执行引擎\"></a>执行引擎</h3><p>执行引擎是JVM的核心组成部分，负责将Java字节码翻译成机器码并执行。JVM的执行引擎采用的是解释执行和即时编译两种方式。</p>\n<ul>\n<li>解释执行：执行引擎将Java字节码逐条解释执行，比较慢但是可移植性强。</li>\n<li>即时编译：执行引擎将Java字节码编译成本地机器码执行，速度快但是可移植性差。</li>\n</ul>\n<p>JVM的执行引擎还有一个重要的概念叫做垃圾回收器（Garbage Collector），它负责自动回收堆中不再使用的对象，避免内存泄漏和内存溢出等问题。垃圾回收器使用的是标记-清除、复制、标记-整理等不同的垃圾回收算法，根据不同的场景选择不同的垃圾回收器可以提高系统性能。</p>\n<h2 id=\"JVM的调优技巧\"><a href=\"#JVM的调优技巧\" class=\"headerlink\" title=\"JVM的调优技巧\"></a>JVM的调优技巧</h2><p>JVM的性能优化是Java应用程序性能优化的重要组成部分，下面介绍几个常用的JVM调优技巧。</p>\n<h3 id=\"堆大小调优\"><a href=\"#堆大小调优\" class=\"headerlink\" title=\"堆大小调优\"></a>堆大小调优</h3><p>堆是JVM中最重要的内存区域之一，它存储了Java程序中的对象实例和数组等动态分配的内存。如果堆的大小不够大，会导致频繁的垃圾回收和内存不足等问题。如果堆的大小过大，会导致内存浪费和GC暂停时间过长等问题。因此，合理调整堆的大小对于应用程序性能是非常重要的。可以通过-Xms和-Xmx参数来设置堆的初始大小和最大大小。</p>\n<h3 id=\"垃圾回收器调优\"><a href=\"#垃圾回收器调优\" class=\"headerlink\" title=\"垃圾回收器调优\"></a>垃圾回收器调优</h3><p>垃圾回收器是JVM的重要组成部分，它负责自动回收堆中不再使用的对象。可以通过调整垃圾回收器的类型、参数和策略来提高系统性能。常用的垃圾回收器有串行垃圾回收器、并行垃圾回收器和CMS垃圾回收器等。</p>\n<h3 id=\"线程数调优\"><a href=\"#线程数调优\" class=\"headerlink\" title=\"线程数调优\"></a>线程数调优</h3><p>JVM中的线程数是可以调整的，可以通过-Xss参数来设置每个线程的栈空间大小，通过-Xmx参数来设置堆的最大大小，从而间接地影响线程数。线程数过多会导致系统资源消耗和上下文切换开销等问题，线程数过少会导致CPU利用率低下和任务处理能力下降等问题。因此，需要根据系统的实际情况调整线程数。</p>\n<h3 id=\"JIT调优\"><a href=\"#JIT调优\" class=\"headerlink\" title=\"JIT调优\"></a>JIT调优</h3><p>JIT（Just-In-Time）编译器是JVM的一个重要组成部分，它负责将Java字节码编译成本地机器码执行。可以通过设置JIT的优化级别、热点代码的阈值等参数来提高系统性能。JIT的优化级别越高，生成的机器码越优化，但是编译时间也会相应增加。</p>\n<h3 id=\"其他调优技巧\"><a href=\"#其他调优技巧\" class=\"headerlink\" title=\"其他调优技巧\"></a>其他调优技巧</h3><p>除了上述几个常用的调优技巧，还可以通过调整JVM的一些参数来提高系统性能，比如关闭调试信息、启用编译器缓存、使用压缩指针等。在实际应用中，需要根据系统的实际情况进行调优，综合考虑各种因素，才能得到最优的性能表现。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>JVM是Java语言的核心，它实现了Java语言的“一次编写，到处运行”的特性。JVM的核心原理是将Java字节码文件加载到内存中，然后通过执行引擎将字节码翻译成机器码并执行。常用的JVM调优技巧包括堆大小调优、垃圾回收器调优、线程数调优、JIT调优等。在实际应用中，需要根据系统的实际情况进行调优，综合考虑各种因素，才能得到最优的性能表现。</p>\n","text":"JVM：Java虚拟机Java虚拟机（Java Virtual Machine，JVM）是Java语言的核心，可以在不同的计算机上运行Java程序，实现Java语言的“一次编写，到处运行”的特性。本文将介绍JVM的核心原理和一些常用的调优技巧。 JVM的核心原理JVM是由Java...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"JVM","slug":"JVM","count":1,"path":"api/categories/JVM.json"}],"tags":[{"name":"JVM","slug":"JVM","count":1,"path":"api/tags/JVM.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JVM%EF%BC%9AJava%E8%99%9A%E6%8B%9F%E6%9C%BA\"><span class=\"toc-text\">JVM：Java虚拟机</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JVM%E7%9A%84%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">JVM的核心原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%EF%BC%88ClassLoader%EF%BC%89\"><span class=\"toc-text\">类加载器（ClassLoader）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%EF%BC%88Runtime-Data-Area%EF%BC%89\"><span class=\"toc-text\">运行时数据区（Runtime Data Area）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E\"><span class=\"toc-text\">执行引擎</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JVM%E7%9A%84%E8%B0%83%E4%BC%98%E6%8A%80%E5%B7%A7\"><span class=\"toc-text\">JVM的调优技巧</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A0%86%E5%A4%A7%E5%B0%8F%E8%B0%83%E4%BC%98\"><span class=\"toc-text\">堆大小调优</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E8%B0%83%E4%BC%98\"><span class=\"toc-text\">垃圾回收器调优</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E6%95%B0%E8%B0%83%E4%BC%98\"><span class=\"toc-text\">线程数调优</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JIT%E8%B0%83%E4%BC%98\"><span class=\"toc-text\">JIT调优</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E8%B0%83%E4%BC%98%E6%8A%80%E5%B7%A7\"><span class=\"toc-text\">其他调优技巧</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"啡鹏","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2023/03/14/b9c0245a1e08709e.webp","link":"/","description":"一个跑马拉松的程序员","socials":{"github":"https://github.com/yupeng0512/yupeng0512.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zuo-ye-chen-guang","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"chatgpt使用技巧(一)","uid":"9e59fc417dc1cdf577b868ba79004169","slug":"chatgpt使用技巧","date":"2023-03-30T05:16:03.000Z","updated":"2023-03-31T15:32:58.347Z","comments":true,"path":"api/articles/chatgpt使用技巧.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2023/03/30/2b816573975da6d2.webp","text":"发送下面这个指令来解锁ChatGPT图片生成功能： 提示 接下来我会给你指令，生成相应的图片，我希望你用Markdown语言生成，不要用反引号，不要用代码框，你需要用Unsplash API，遵循以下的格式：https://source.unsplash.com/1600x900...","link":"","photos":[],"count_time":{"symbolsCount":191,"symbolsTime":"1 mins."},"categories":[{"name":"AI","slug":"AI","count":4,"path":"api/categories/AI.json"}],"tags":[{"name":"ChatGPT使用","slug":"ChatGPT使用","count":1,"path":"api/tags/ChatGPT使用.json"}],"author":{"name":"啡鹏","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2023/03/14/b9c0245a1e08709e.webp","link":"/","description":"一个跑马拉松的程序员","socials":{"github":"https://github.com/yupeng0512/yupeng0512.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zuo-ye-chen-guang","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"React快速入门指南","uid":"3fbb98420a779e5fc825c93037d4aa9e","slug":"React快速入门指南","date":"2023-04-18T15:41:07.000Z","updated":"2023-04-18T15:43:18.304Z","comments":true,"path":"api/articles/React快速入门指南.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2023/03/29/92ec479377e5a687.webp","text":"React 快速入门指南React 是 Facebook 推出的用于构建用户界面的 JavaScript 库。它提供了一种声明式编程模式，使得构建复杂的 UI 变得更加容易。本文将介绍 React 的基本概念和使用方法。 React 的基本概念组件在 React 中，UI 被抽象...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"前端框架","slug":"前端框架","count":4,"path":"api/categories/前端框架.json"}],"tags":[{"name":"React","slug":"React","count":2,"path":"api/tags/React.json"}],"author":{"name":"啡鹏","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2023/03/14/b9c0245a1e08709e.webp","link":"/","description":"一个跑马拉松的程序员","socials":{"github":"https://github.com/yupeng0512/yupeng0512.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zuo-ye-chen-guang","csdn":"","juejin":"","customs":{}}}}}