{"title":"JVM类加载机制","uid":"696f58cc973f75c60837976660da7ceb","slug":"JVM类加载机制","date":"2023-05-11T05:41:42.000Z","updated":"2023-05-11T06:13:46.741Z","comments":true,"path":"api/articles/JVM类加载机制.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2023/04/18/24189eeb829832cd.webp","content":"<h1 id=\"JVM类加载机制\"><a href=\"#JVM类加载机制\" class=\"headerlink\" title=\"JVM类加载机制\"></a>JVM类加载机制</h1><p>Java虚拟机（JVM）是Java语言的核心组成部分，它负责将Java程序编译后生成的字节码文件转换为机器码并执行。在JVM中，类的加载是由类加载器（ClassLoader）完成的，它负责将类的字节码文件加载到内存中，并在运行时对类进行管理。本文将介绍JVM类加载机制的基本概念、类加载过程、类加载器分类以及双亲委派模型。</p>\n<h2 id=\"类加载的基本概念\"><a href=\"#类加载的基本概念\" class=\"headerlink\" title=\"类加载的基本概念\"></a>类加载的基本概念</h2><p>在JVM中，类的加载是指将类的字节码文件加载到内存中，并在Java虚拟机中生成一个代表该类的Class对象。类的加载过程可以分为三个阶段：</p>\n<ul>\n<li>加载（Loading）：将类的字节码文件读入内存中，并创建一个代表该类的Class对象。</li>\n<li>链接（Linking）：将已经读入内存的类的字节码文件进行校验、准备和解析。</li>\n<li>初始化（Initialization）：为类的静态变量赋初值，并执行类的静态代码块。</li>\n</ul>\n<h2 id=\"类加载的过程\"><a href=\"#类加载的过程\" class=\"headerlink\" title=\"类加载的过程\"></a>类加载的过程</h2><p>类的加载过程可以分为以下三个步骤：</p>\n<ol>\n<li>加载：加载是指将类的字节码文件读入内存中，并创建一个代表该类的Class对象。类加载器将类的字节码文件读取到内存中，并生成一个代表该类的Class对象，该对象包含了类的所有信息，如类的名称、继承关系、方法和属性等。</li>\n<li>链接：链接是指将已经读入内存的类的字节码文件进行校验、准备和解析。链接阶段包括以下三个步骤：<ul>\n<li>校验：Java虚拟机会对类的字节码进行校验，以确保它符合Java虚拟机规范，并且不包含不安全的代码。</li>\n<li>准备：Java虚拟机会为类的静态变量分配内存，并设置默认值。</li>\n<li>解析：Java虚拟机会将类中的符号引用（如方法和变量的名称）转换成直接引用（如内存地址或函数指针）。</li>\n</ul>\n</li>\n<li>初始化：初始化是指为类的静态变量赋初值，并执行类的静态代码块。当Java虚拟机首次遇到一个类时，它会执行该类的静态代码块，并为类的静态变量赋予初值。初始化是类加载的最后一个阶段。</li>\n</ol>\n<h2 id=\"类加载器分类\"><a href=\"#类加载器分类\" class=\"headerlink\" title=\"类加载器分类\"></a>类加载器分类</h2><p>在JVM中，类加载器可以分为以下三种：</p>\n<ol>\n<li>启动类加载器（Bootstrap Class Loader）：它负责加载Java虚拟机运行所需的基本类，如java.lang.Object、java.lang.Class等。</li>\n<li>扩展类加载器（Extension Class Loader）：它负责加载Java虚拟机的扩展类，位于JRE的lib&#x2F;ext目录下的jar包。</li>\n<li>应用程序类加载器（Application Class Loader）：它负责加载应用程序的类，也称为系统类加载器。</li>\n</ol>\n<p>此外，还可以通过自定义类加载器来加载特定的类或jar包。</p>\n<h2 id=\"双亲委派模型\"><a href=\"#双亲委派模型\" class=\"headerlink\" title=\"双亲委派模型\"></a>双亲委派模型</h2><p>在JVM中，类加载器采用了双亲委派模型。这个模型基于一个假设：所有的Java类都由根类加载器（Bootstrap Class Loader）加载，而其他类加载器都是由它的父类加载器加载。当一个类加载器需要加载一个类时，它会先委派给它的父类加载器，如果父类加载器无法加载，则再由它自己进行加载。这样的好处在于避免了重复加载和类的版本冲突。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文介绍了JVM类加载机制的基本概念、类加载过程、类加载器分类以及双亲委派模型。了解JVM类加载机制对于Java开发人员来说非常重要，可以帮助我们更好地理解Java应用程序的运行时机制，从而更好地进行开发和调试。</p>\n","text":"JVM类加载机制Java虚拟机（JVM）是Java语言的核心组成部分，它负责将Java程序编译后生成的字节码文件转换为机器码并执行。在JVM中，类的加载是由类加载器（ClassLoader）完成的，它负责将类的字节码文件加载到内存中，并在运行时对类进行管理。本文将介绍JVM类加载...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"JVM","slug":"JVM","count":3,"path":"api/categories/JVM.json"}],"tags":[{"name":"JVM","slug":"JVM","count":3,"path":"api/tags/JVM.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">JVM类加载机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">类加载的基本概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">类加载的过程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">类加载器分类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">双亲委派模型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"啡鹏","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2023/03/14/b9c0245a1e08709e.webp","link":"/","description":"一个跑马拉松的程序员","socials":{"github":"https://github.com/yupeng0512/yupeng0512.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zuo-ye-chen-guang","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"多线程知识合集","uid":"4e3591e7652330cea9e5d40714d5a358","slug":"多线程知识合集","date":"2023-04-27T09:42:07.000Z","updated":"2023-04-27T14:56:08.881Z","comments":true,"path":"api/articles/多线程知识合集.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2023/03/14/006c1f400197c149.webp","text":"1 线程状态1.1 状态介绍当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。线程对象在不同的时期有不同的状态。那么Java中的线程存在哪几种状态呢？Java中的线程 状态被定义在了java.lang.Thread.State枚举类中，State枚举...","link":"","photos":[],"count_time":{"symbolsCount":"91k","symbolsTime":"1:22"},"categories":[{"name":"Java后端","slug":"Java后端","count":5,"path":"api/categories/Java后端.json"}],"tags":[{"name":"Java","slug":"Java","count":3,"path":"api/tags/Java.json"}],"author":{"name":"啡鹏","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2023/03/14/b9c0245a1e08709e.webp","link":"/","description":"一个跑马拉松的程序员","socials":{"github":"https://github.com/yupeng0512/yupeng0512.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zuo-ye-chen-guang","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"JVM内存管理","uid":"e1a635b0a39e4c098d3b64531c744865","slug":"JVM内存管理","date":"2023-05-09T03:20:33.000Z","updated":"2023-05-09T06:09:22.296Z","comments":true,"path":"api/articles/JVM内存管理.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2023/04/18/24189eeb829832cd.webp","text":"JVM内存管理JVM的内存模型JVM的内存模型是Java程序运行时所使用的内存的抽象，它定义了Java程序中各种数据的存储方式和访问方式，以及垃圾回收器的行为等相关规则。了解JVM的内存模型对于Java程序的开发、调试和性能优化都是非常重要的。 JVM的内存区域JVM的内存区域可...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"JVM","slug":"JVM","count":3,"path":"api/categories/JVM.json"}],"tags":[{"name":"JVM","slug":"JVM","count":3,"path":"api/tags/JVM.json"}],"author":{"name":"啡鹏","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2023/03/14/b9c0245a1e08709e.webp","link":"/","description":"一个跑马拉松的程序员","socials":{"github":"https://github.com/yupeng0512/yupeng0512.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zuo-ye-chen-guang","csdn":"","juejin":"","customs":{}}}}}