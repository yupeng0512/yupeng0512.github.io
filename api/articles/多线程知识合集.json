{"title":"多线程知识合集","uid":"4e3591e7652330cea9e5d40714d5a358","slug":"多线程知识合集","date":"2023-04-27T09:42:07.000Z","updated":"2023-04-27T09:43:22.897Z","comments":true,"path":"api/articles/多线程知识合集.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2023/03/14/006c1f400197c149.webp","content":"<h1 id=\"1-线程状态\"><a href=\"#1-线程状态\" class=\"headerlink\" title=\"1 线程状态\"></a>1 线程状态</h1><h2 id=\"1-1-状态介绍\"><a href=\"#1-1-状态介绍\" class=\"headerlink\" title=\"1.1 状态介绍\"></a>1.1 状态介绍</h2><p>当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。线程对象在不同的时期有不同的状态。那么Java中的线程存在哪几种状态呢？Java中的线程</p>\n<p>状态被定义在了java.lang.Thread.State枚举类中，State枚举类的源码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Thread &#123;\n    \n    public enum State &#123;\n    \n        &#x2F;* 新建 *&#x2F;\n        NEW , \n\n        &#x2F;* 可运行状态 *&#x2F;\n        RUNNABLE , \n\n        &#x2F;* 阻塞状态 *&#x2F;\n        BLOCKED , \n\n        &#x2F;* 无限等待状态 *&#x2F;\n        WAITING , \n\n        &#x2F;* 计时等待 *&#x2F;\n        TIMED_WAITING , \n\n        &#x2F;* 终止 *&#x2F;\n        TERMINATED;\n    \n\t&#125;\n    \n    &#x2F;&#x2F; 获取当前线程的状态\n    public State getState() &#123;\n        return jdk.internal.misc.VM.toThreadState(threadStatus);\n    &#125;\n    \n&#125;</code></pre>\n\n<p>通过源码我们可以看到Java中的线程存在6种状态，每种线程状态的含义如下</p>\n<table>\n<thead>\n<tr>\n<th>线程状态</th>\n<th>具体含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NEW</td>\n<td>一个尚未启动的线程的状态。也称之为初始状态、开始状态。线程刚被创建，但是并未启动。还没调用start方法。MyThread t &#x3D; new MyThread()只有线程象，没有线程特征。</td>\n</tr>\n<tr>\n<td>RUNNABLE</td>\n<td>当我们调用线程对象的start方法，那么此时线程对象进入了RUNNABLE状态。那么此时才是真正的在JVM进程中创建了一个线程，线程一经启动并不是立即得到执行，线程的运行与否要听令与CPU的调度，那么我们把这个中间状态称之为可执行状态(RUNNABLE)也就是说它具备执行的资格，但是并没有真正的执行起来而是在等待CPU的度。</td>\n</tr>\n<tr>\n<td>BLOCKED</td>\n<td>当一个线程试图获取一个对象锁，而该对象锁被其他的线程持有，则该线程进入Blocked状态；当该线程持有锁时，该线程将变成Runnable状态。</td>\n</tr>\n<tr>\n<td>WAITING</td>\n<td>一个正在等待的线程的状态。也称之为等待状态。造成线程等待的原因有两种，分别是调用Object.wait()、join()方法。处于等待状态的线程，正在等待其他线程去执行一个特定的操作。例如：因为wait()而等待的线程正在等待另一个线程去调用notify()或notifyAll()；一个因为join()而等待的线程正在等待另一个线程结束。</td>\n</tr>\n<tr>\n<td>TIMED_WAITING</td>\n<td>一个在限定时间内等待的线程的状态。也称之为限时等待状态。造成线程限时等待状态的原因有三种，分别是：Thread.sleep(long)，Object.wait(long)、join(long)。</td>\n</tr>\n<tr>\n<td>TERMINATED</td>\n<td>一个完全运行完成的线程的状态。也称之为终止状态、结束状态</td>\n</tr>\n</tbody></table>\n<p>各个状态的转换，如下图所示：</p>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571652681276.png\" alt=\"1571652681276\"> </p>\n<h2 id=\"1-2-案例演示\"><a href=\"#1-2-案例演示\" class=\"headerlink\" title=\"1.2 案例演示\"></a>1.2 案例演示</h2><p>为了验证上面论述的状态即状态转换的正确性，也为了加深对线程状态转换的理解，下面通过三个案例演示线程间中的状态转换。</p>\n<h3 id=\"1-2-1-案例一\"><a href=\"#1-2-1-案例一\" class=\"headerlink\" title=\"1.2.1 案例一\"></a>1.2.1 案例一</h3><p>本案例主要演示TIME_WAITING的状态转换。</p>\n<p>需求：编写一段代码，依次显示一个线程的这些状态：NEW -&gt; RUNNABLE -&gt; TIME_WAITING -&gt; RUNNABLE -&gt;  TERMINATED</p>\n<p>为了简化我们的开发，本次我们使用匿名内部类结合lambda表达式的方式使用多线程。</p>\n<p>代码实现</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ThreadStateDemo01 &#123;\n\n    public static void main(String[] args) throws InterruptedException &#123;\n\n        &#x2F;&#x2F;定义一个内部线程\n        Thread thread &#x3D; new Thread(() -&gt; &#123;\n            System.out.println(&quot;2.执行thread.start()之后，线程的状态：&quot; + Thread.currentThread().getState());\n            try &#123;\n                &#x2F;&#x2F;休眠100毫秒\n                Thread.sleep(100);\n            &#125; catch (InterruptedException e) &#123;\n                e.printStackTrace();\n            &#125;\n            System.out.println(&quot;4.执行Thread.sleep(long)完成之后，线程的状态：&quot; + Thread.currentThread().getState());\n        &#125;);\n\n        &#x2F;&#x2F;获取start()之前的状态\n        System.out.println(&quot;1.通过new初始化一个线程，但是还没有start()之前，线程的状态：&quot; + thread.getState());\n\n        &#x2F;&#x2F;启动线程\n        thread.start();\n\n        &#x2F;&#x2F;休眠50毫秒\n        Thread.sleep(50);\n\n        &#x2F;&#x2F;因为thread1需要休眠100毫秒，所以在第50毫秒，thread处于sleep状态\n        &#x2F;&#x2F;用main线程来获取thread1线程的状态，因为thread1线程睡眠时间较长\n        &#x2F;&#x2F;所以当main线程执行的时候，thread1线程还没有睡醒，还处于计时等待状态\n        System.out.println(&quot;3.执行Thread.sleep(long)时，线程的状态：&quot; + thread.getState());\n\n        &#x2F;&#x2F;thread1和main线程主动休眠150毫秒，所以在第150毫秒,thread早已执行完毕\n        Thread.sleep(100);\n\n        System.out.println(&quot;5.线程执行完毕之后，线程的状态：&quot; + thread.getState() + &quot;\\n&quot;);\n\n    &#125;\n\n&#125;</code></pre>\n\n<p>控制台输出</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">1.通过new初始化一个线程，但是还没有start()之前，线程的状态：NEW\n2.执行thread.start()之后，线程的状态：RUNNABLE\n3.执行Thread.sleep(long)时，线程的状态：TIMED_WAITING\n4.执行Thread.sleep(long)完成之后，线程的状态：RUNNABLE\n5.线程执行完毕之后，线程的状态：TERMINATED</code></pre>\n\n<h3 id=\"1-2-2-案例二\"><a href=\"#1-2-2-案例二\" class=\"headerlink\" title=\"1.2.2 案例二\"></a>1.2.2 案例二</h3><p>本案例主要演示WAITING的状态转换。</p>\n<p>需求：编写一段代码，依次显示一个线程的这些状态：NEW -&gt; RUNNABLE -&gt; WAITING -&gt; RUNNABLE -&gt; TERMINATED</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ThreadStateDemo02 &#123;\n\n    public static void main(String[] args) throws InterruptedException &#123;\n\n        &#x2F;&#x2F;定义一个对象，用来加锁和解锁\n        Object obj &#x3D; new Object();\n\n        &#x2F;&#x2F;定义一个内部线程\n        Thread thread1 &#x3D; new Thread(() -&gt; &#123;\n            System.out.println(&quot;2.执行thread.start()之后，线程的状态：&quot; + Thread.currentThread().getState());\n            synchronized (obj) &#123;\n                try &#123;\n\n                    &#x2F;&#x2F;thread1需要休眠100毫秒\n                    Thread.sleep(100);\n\n                    &#x2F;&#x2F;thread1100毫秒之后，通过wait()方法释放obj对象是锁\n                    obj.wait();\n                    \n                &#125; catch (InterruptedException e) &#123;\n                    e.printStackTrace();\n                &#125;\n            &#125;\n            System.out.println(&quot;4.被object.notify()方法唤醒之后，线程的状态：&quot; + Thread.currentThread().getState());\n        &#125;);\n\n        &#x2F;&#x2F;获取start()之前的状态\n        System.out.println(&quot;1.通过new初始化一个线程，但是还没有start()之前，线程的状态：&quot; + thread1.getState());\n\n        &#x2F;&#x2F;启动线程\n        thread1.start();\n\n        &#x2F;&#x2F;main线程休眠150毫秒\n        Thread.sleep(150);\n\n        &#x2F;&#x2F;因为thread1在第100毫秒进入wait等待状态，所以第150秒肯定可以获取其状态\n        System.out.println(&quot;3.执行object.wait()时，线程的状态：&quot; + thread1.getState());\n\n        &#x2F;&#x2F;声明另一个线程进行解锁\n        new Thread(() -&gt; &#123;\n            synchronized (obj) &#123;\n                &#x2F;&#x2F;唤醒等待的线程\n                obj.notify();\n            &#125;\n        &#125;).start();\n\n        &#x2F;&#x2F;main线程休眠10毫秒等待thread1线程能够苏醒\n        Thread.sleep(10);\n\n        &#x2F;&#x2F;获取thread1运行结束之后的状态\n        System.out.println(&quot;5.线程执行完毕之后，线程的状态：&quot; + thread1.getState() + &quot;\\n&quot;);\n\n    &#125;\n\n&#125;</code></pre>\n\n<p>控制台输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">1.通过new初始化一个线程，但是还没有start()之前，线程的状态：NEW\n2.执行thread.start()之后，线程的状态：RUNNABLE\n3.执行object.wait()时，线程的状态：WAITING\n4.被object.notify()方法唤醒之后，线程的状态：RUNNABLE\n5.线程执行完毕之后，线程的状态：TERMINATED</code></pre>\n\n<h3 id=\"1-2-3-案例三\"><a href=\"#1-2-3-案例三\" class=\"headerlink\" title=\"1.2.3 案例三\"></a>1.2.3 案例三</h3><p>本案例主要演示BLOCKED的状态转换。</p>\n<p>需求：编写一段代码，依次显示一个线程的这些状态：NEW -&gt; RUNNABLE -&gt; BLOCKED -&gt; RUNNABLE -&gt; TERMINATED</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ThreadStateDemo03 &#123;\n\n    public static void main(String[] args) throws InterruptedException &#123;\n\n        &#x2F;&#x2F;定义一个对象，用来加锁和解锁\n        Object obj2 &#x3D; new Object();\n\n        &#x2F;&#x2F;定义一个线程，先抢占了obj2对象的锁\n        new Thread(() -&gt; &#123;\n            synchronized (obj2) &#123;\n                try &#123;\n                    Thread.sleep(100);              &#x2F;&#x2F;第一个线程要持有锁100毫秒\n                    obj2.wait();                          &#x2F;&#x2F;然后通过wait()方法进行等待状态，并释放obj2的对象锁\n                &#125; catch (InterruptedException e) &#123;\n                    e.printStackTrace();\n                &#125;\n            &#125;\n        &#125;).start();\n\n        &#x2F;&#x2F;定义目标线程，获取等待获取obj2的锁\n        Thread thread &#x3D; new Thread(() -&gt; &#123;\n            System.out.println(&quot;2.执行thread.start()之后，线程的状态：&quot; + Thread.currentThread().getState());\n            synchronized (obj2) &#123;\n                try &#123;\n                    Thread.sleep(100);              &#x2F;&#x2F;thread3要持有对象锁100毫秒\n                    obj2.notify();                        &#x2F;&#x2F;然后通过notify()方法唤醒所有在ojb2上等待的线程继续执行后续操作\n                &#125; catch (InterruptedException e) &#123;\n                    e.printStackTrace();\n                &#125;\n            &#125;\n            System.out.println(&quot;4.阻塞结束后，线程的状态：&quot; + Thread.currentThread().getState());\n        &#125;);\n\n        &#x2F;&#x2F;获取start()之前的状态\n        System.out.println(&quot;1.通过new初始化一个线程，但是还没有thread.start()之前，线程的状态：&quot; + thread.getState());\n\n        &#x2F;&#x2F;启动线程\n        thread.start();\n\n        &#x2F;&#x2F;先等100毫秒\n        Thread.sleep(50);\n\n        &#x2F;&#x2F;第一个线程释放锁至少需要100毫秒，所以在第50毫秒时，thread正在因等待obj的对象锁而阻塞\n        System.out.println(&quot;3.因为等待锁而阻塞时，线程的状态：&quot; + thread.getState());\n\n        &#x2F;&#x2F;再等300毫秒\n        Thread.sleep(300);\n\n        &#x2F;&#x2F;两个线程的执行时间加上之前等待的50毫秒总共是250毫秒，所以第300毫秒，所有的线程都已经执行完毕\n        System.out.println(&quot;5.线程执行完毕之后，线程的状态：&quot; + thread.getState());\n\n    &#125;\n\n&#125;\n\n\n&#x2F;&#x2F;---------------------代码简化--------------------------------------------\nObject obj &#x3D; new Object();\n\n        Thread t1 &#x3D; new Thread(()-&gt;&#123;\n            synchronized (obj)&#123;\n                try &#123;\n                    Thread.sleep(1000);\n                &#125; catch (InterruptedException e) &#123;\n                    e.printStackTrace();\n                &#125;\n            &#125;\n        &#125;);\n        t1.start();\n\n\n        Thread t2 &#x3D; new Thread(()-&gt;&#123;\n            System.out.println(&quot;线程开启之后的状态&quot; + Thread.currentThread().getState());\n            synchronized (obj)&#123;\n                System.out.println(&quot;进入之后的状态&quot; + Thread.currentThread().getState());\n            &#125;\n        &#125;);\n\n\n\n        System.out.println(&quot;创建线程对象后,但是不调用start方法的状态&quot; + t2.getState());\n        t2.start();\n        Thread.sleep(100);\n        System.out.println(t2.getState());\n        Thread.sleep(2000);\n        System.out.println(t2.getState());</code></pre>\n\n<p>控制台输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">1.通过new初始化一个线程，但是还没有thread.start()之前，线程的状态：NEW\n2.执行thread.start()之后，线程的状态：RUNNABLE\n3.因为等待锁而阻塞时，线程的状态：BLOCKED\n4.阻塞结束后，线程的状态：RUNNABLE\n5.线程执行完毕之后，线程的状态：TERMINATED</code></pre>\n\n<p>通过上面3个案例的代码演示，我们可以证明开始章节说所述的线程状态以及线程状态转换都是正确的。</p>\n<h1 id=\"2-线程池\"><a href=\"#2-线程池\" class=\"headerlink\" title=\"2 线程池\"></a>2 线程池</h1><h2 id=\"2-1-概述\"><a href=\"#2-1-概述\" class=\"headerlink\" title=\"2.1 概述\"></a>2.1 概述</h2><p>提到池，大家应该能想到的就是水池。水池就是一个容器，在该容器中存储了很多的水。那么什么是线程池呢？线程池也是可以看做成一个池子，在该池子中存储很多个线程。</p>\n<p>线程池存在的意义：</p>\n<p>系统创建一个线程的成本是比较高的，因为它涉及到与操作系统交互，当程序中需要创建大量生存期很短暂的线程时，频繁的创建和销毁线程对系统的资源消耗有可能大于业务处理是对系</p>\n<p>统资源的消耗，这样就有点”舍本逐末”了。针对这一种情况，为了提高性能，我们就可以采用线程池。线程池在启动的时，会创建大量空闲线程，当我们向线程池提交任务的时，线程池就</p>\n<p>会启动一个线程来执行该任务。等待任务执行完毕以后，线程并不会死亡，而是再次返回到线程池中称为空闲状态。等待下一次任务的执行。</p>\n<h2 id=\"2-2-自定义线程池\"><a href=\"#2-2-自定义线程池\" class=\"headerlink\" title=\"2.2 自定义线程池\"></a>2.2 自定义线程池</h2><h3 id=\"2-2-1-线程池的设计思路\"><a href=\"#2-2-1-线程池的设计思路\" class=\"headerlink\" title=\"2.2.1 线程池的设计思路\"></a>2.2.1 线程池的设计思路</h3><p>线程池的思路和生产者消费者模型是很接近的</p>\n<ol>\n<li>准备一个任务容器</li>\n<li>一次性启动多个(2个)消费者线程</li>\n<li>刚开始任务容器是空的，所以线程都在wait</li>\n<li>直到一个外部线程向这个任务容器中扔了一个”任务”，就会有一个消费者线程被唤醒</li>\n<li>这个消费者线程取出”任务”，并且执行这个任务，执行完毕后，继续等待下一次任务的到来</li>\n</ol>\n<p>在整个过程中，都不需要创建新的线程，而是循环使用这些已经存在的线程。</p>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571655104091.png\" alt=\"1571655104091\"> </p>\n<h3 id=\"2-2-2-代码实现\"><a href=\"#2-2-2-代码实现\" class=\"headerlink\" title=\"2.2.2 代码实现\"></a>2.2.2 代码实现</h3><p>实现思路：</p>\n<ul>\n<li>创建一个线程池类(ThreadPool)</li>\n<li>在该类中定义两个成员变量poolSize(线程池初始化线程的个数) , BlockingQueue<Runnable>(任务容器)</li>\n<li>通过构造方法来创建两个线程对象(消费者线程)，并且启动</li>\n<li>使用内部类的方式去定义一个线程类(TaskThread),可以提供一个构造方法用来初始化线程名称</li>\n<li>两个消费者线程需要不断的从任务容器中获取任务，如果没有任务，则线程处于阻塞状态。</li>\n<li>提供一个方法(submit)向任务容器中添加任务</li>\n<li>定义测试类进行测试</li>\n</ul>\n<p>线程池类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ThreadPool &#123;\n\n    &#x2F;&#x2F; 初始化线程个数\n    private static final int DEFAULT_POOL_SIZE &#x3D; 2 ;\n\n    &#x2F;&#x2F; 在该类中定义两个成员变量poolSize(线程池初始化线程的个数) , BlockingQueue&lt;Runnable&gt;(任务容器)\n    private int poolSize &#x3D; DEFAULT_POOL_SIZE ;\n    private BlockingQueue&lt;Runnable&gt; blockingQueue &#x3D; new LinkedBlockingQueue&lt;Runnable&gt;() ;\n\n    &#x2F;&#x2F; 无参构造方法\n    public ThreadPool()&#123;\n        this.initThread();\n    &#125;\n\n    &#x2F;&#x2F; 有参构造方法，通过构造方法来创建两个线程对象(消费者线程)，并且启动\n    public ThreadPool(int poolSize) &#123;\n        if(poolSize &gt; 0) &#123;\n            this.poolSize &#x3D; poolSize ;\n        &#125;\n        this.initThread();\n    &#125;\n\n    &#x2F;&#x2F; 初始化线程方法\n    public void initThread()&#123;\n        for(int x &#x3D; 0 ; x &lt; poolSize ; x++) &#123;\n            new TaskThread(&quot;线程---&gt;&quot; + x).start();\n        &#125;\n    &#125;\n\n    &#x2F;&#x2F; 提供一个方法(submit)向任务容器中添加任务\n    public void submit(Runnable runnable) &#123;\n\n        try &#123;\n            blockingQueue.put(runnable);\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n        &#125;\n\n    &#125;\n\n    &#x2F;&#x2F; 使用内部类的方式去定义一个线程类\n    public class TaskThread extends Thread &#123;\n\n        &#x2F;&#x2F; 提供一个构造方法，用来初始化线程名称\n        public TaskThread(String name) &#123;\n            super(name);\n        &#125;\n\n        @Override\n        public void run() &#123;\n\n            while(true) &#123;\n\n                try &#123;\n\n                    &#x2F;&#x2F; 两个消费者线程需要不断的从任务容器中获取任务，如果没有任务，则线程处于阻塞状态。\n                    Runnable task &#x3D; blockingQueue.take();\n                    task.run();\n\n                &#125; catch (InterruptedException e) &#123;\n                    e.printStackTrace();\n                &#125;\n\n            &#125;\n\n        &#125;\n    &#125;\n\n&#125;</code></pre>\n\n<p>测试类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ThreadPoolDemo01 &#123;\n\n    public static void main(String[] args) &#123;\n\n        &#x2F;&#x2F; 创建线程池对象,无参构造方法创建\n        &#x2F;&#x2F; ThreadPool threadPool &#x3D; new ThreadPool();\n        ThreadPool threadPool &#x3D; new ThreadPool(5);\n\n        &#x2F;&#x2F; 提交任务\n        for(int x &#x3D; 0 ; x &lt; 10 ; x++) &#123;\n            threadPool.submit( () -&gt; &#123;\n                System.out.println(Thread.currentThread().getName() + &quot;----&gt;&gt;&gt;处理了任务&quot;);\n            &#125;);\n        &#125;\n\n    &#125;\n\n&#125;</code></pre>\n\n<p>使用无参构造方法创建线程池对象，控制台输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">线程---&gt;0----&gt;&gt;&gt;处理了任务\n线程---&gt;1----&gt;&gt;&gt;处理了任务\n线程---&gt;0----&gt;&gt;&gt;处理了任务\n线程---&gt;1----&gt;&gt;&gt;处理了任务\n线程---&gt;0----&gt;&gt;&gt;处理了任务\n线程---&gt;1----&gt;&gt;&gt;处理了任务\n线程---&gt;0----&gt;&gt;&gt;处理了任务\n线程---&gt;1----&gt;&gt;&gt;处理了任务\n线程---&gt;0----&gt;&gt;&gt;处理了任务\n线程---&gt;1----&gt;&gt;&gt;处理了任务</code></pre>\n\n<p>通过控制台的输出，我们可以看到在线程池中存在两个线程，通过这2个线程处理了10个任务。</p>\n<p>使用有参构造方法创建线程池对象，传递的参数是5，控制台输出结果</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">线程---&gt;3----&gt;&gt;&gt;处理了任务\n线程---&gt;4----&gt;&gt;&gt;处理了任务\n线程---&gt;2----&gt;&gt;&gt;处理了任务\n线程---&gt;0----&gt;&gt;&gt;处理了任务\n线程---&gt;2----&gt;&gt;&gt;处理了任务\n线程---&gt;4----&gt;&gt;&gt;处理了任务\n线程---&gt;3----&gt;&gt;&gt;处理了任务\n线程---&gt;1----&gt;&gt;&gt;处理了任务\n线程---&gt;2----&gt;&gt;&gt;处理了任务\n线程---&gt;0----&gt;&gt;&gt;处理了任务</code></pre>\n\n<p>通过控制台的输出，我们可以看到在线程池中存在两个线程，通过这5个线程处理了10个任务。</p>\n<h2 id=\"2-3-JDK中线程池\"><a href=\"#2-3-JDK中线程池\" class=\"headerlink\" title=\"2.3 JDK中线程池\"></a>2.3 JDK中线程池</h2><h3 id=\"2-3-1-Executors\"><a href=\"#2-3-1-Executors\" class=\"headerlink\" title=\"2.3.1 Executors\"></a>2.3.1 Executors</h3><p>JDK对线程池也进行了相关的实现，在真实企业开发中我们也很少去自定义线程池，而是使用JDK中自带的线程池。</p>\n<p>我们可以使用Executors中所提供的<strong>静态</strong>方法来创建线程池。</p>\n<p><font color=\"blue\" size=\"3\"><strong>获取线程池的方法</strong></font>：</p>\n<p>&#x2F;&#x2F;通过不同的方法创建出来的线程池具有不同的特点。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">ExecutorService newCachedThreadPool(): \t\t\t\t创建一个可缓存线程池，可灵活的去创建线程，并且灵活的回收线程，若无可回收，则新建线程。\nExecutorService newFixedThreadPool(int nThreads): \t初始化一个具有固定数量线程的线程池\nExecutorService newSingleThreadExecutor(): \t\t\t初始化一个具有一个线程的线程池\n\t\t\t\t\t\t\t\t\t&#x2F;&#x2F;做完一个，再做一个，不停歇，直到做完，老黄牛性格\nScheduledExecutorService newSingleThreadScheduledExecutor(): 初始化一个具有一个线程的线程池，支持定时及周期性任务执行\n\t\t\t\t\t\t\t\t\t&#x2F;&#x2F;按照固定的计划去执行线程，一个做完之后按照计划再做另一个</code></pre>\n\n<p>这个方法返回的都是ExecutorService类型的对象(ScheduledExecutorService继承ExecutorService),而ExecutorService可以看做就是一个线程池，那么ExecutorService</p>\n<p>给我们提供了哪些方法供我们使用呢？</p>\n<p><font color=\"blue\" size=\"3\"><strong>ExecutorService中的常见方法</strong></font>：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Future&lt;?&gt; submit(Runnable task)：\t提交任务方法\nvoid shutdown()：\t\t\t\t\t关闭线程池的方法\t</code></pre>\n\n\n\n<p><font color=\"blue\" size=\"3\"><strong>案例1</strong></font>：演示newCachedThreadPool方法所获取到的线程池的特点</p>\n<p>测试类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ExecutorsDemo01 &#123;\n\n    &#x2F;&#x2F; 演示Executors中的newCachedThreadPool返回的线程池的特点\n    public static void main(String[] args) throws InterruptedException &#123;\n\n        &#x2F;&#x2F; 获取线程池对象\n        ExecutorService threadPool &#x3D; Executors.newCachedThreadPool();\n\n        &#x2F;&#x2F; 提交任务\n        threadPool.submit(() -&gt; &#123;\n            System.out.println( Thread.currentThread().getName() + &quot;---执行了任务&quot;);\n        &#125;);\n\n        &#x2F;&#x2F; 提交任务\n        threadPool.submit(() -&gt; &#123;\n            System.out.println( Thread.currentThread().getName() + &quot;---执行了任务&quot;);\n        &#125;);\n\n        &#x2F;&#x2F; 不使用线程池了，还可以将线程池关闭\n        threadPool.shutdown();\n\n    &#125;\n\n&#125;</code></pre>\n\n<p>控制台输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">pool-1-thread-2---执行了任务\npool-1-thread-1---执行了任务</code></pre>\n\n<p>针对每一个任务，线程池为其分配一个线程去执行，我们可以在第二次提交任务的时候，让主线程休眠一小会儿，看程序的执行结果。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ExecutorsDemo02 &#123;\n\n    &#x2F;&#x2F; 演示Executors中的newCachedThreadPool返回的线程池的特点\n    public static void main(String[] args) throws InterruptedException &#123;\n\n        &#x2F;&#x2F; 获取线程池对象\n        ExecutorService threadPool &#x3D; Executors.newCachedThreadPool();\n\n        &#x2F;&#x2F; 提交任务\n        threadPool.submit(() -&gt; &#123;\n            System.out.println( Thread.currentThread().getName() + &quot;---执行了任务&quot;);\n        &#125;);\n\n        &#x2F;&#x2F; 线程休眠2秒，主线程休眠2秒，此时之前提交的任务应该已经执行完毕\n        TimeUnit.SECONDS.sleep(2);\n\n        &#x2F;&#x2F; 提交任务\n        threadPool.submit(() -&gt; &#123;\n            System.out.println( Thread.currentThread().getName() + &quot;---执行了任务&quot;);\n        &#125;);\n\n        &#x2F;&#x2F; 不使用线程池了，还可以将线程池关闭\n        threadPool.shutdown();\n\n    &#125;\n\n&#125;</code></pre>\n\n<p>控制台输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">pool-1-thread-1---执行了任务\npool-1-thread-1---执行了任务</code></pre>\n\n<p>我们发现是通过一个线程执行了两个任务。此时就说明线程池中的线程”pool-1-thread-1”被线程池回收了，成为了空闲线程，当我们再次提交任务的时候，该线程就去执行新的任务。</p>\n<p><font color=\"blue\" size=\"3\"><strong>案例2</strong></font>：演示newFixedThreadPool方法所获取到的线程池的特点</p>\n<p>测试类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ExecutorsDemo03 &#123;\n\n    &#x2F;&#x2F; 演示newFixedThreadPool方法所获取到的线程池的特点\n    public static void main(String[] args) &#123;\n\n        &#x2F;&#x2F; 获取线程池对象,初始化一个具有固定数量线程的线程池\n        ExecutorService threadPool &#x3D; Executors.newFixedThreadPool(3);  &#x2F;&#x2F; 在该线程池中存在3个线程\n\n        &#x2F;&#x2F; 提交任务\n        for(int x &#x3D; 0 ; x &lt; 5 ; x++) &#123;\n            threadPool.submit( () -&gt; &#123;\n                System.out.println(Thread.currentThread().getName() + &quot;-----&gt;&gt;&gt;执行了任务&quot; );\n            &#125;);\n        &#125;\n\n        &#x2F;&#x2F; 关闭线程池\n        threadPool.shutdown();\n    &#125;\n\n&#125;</code></pre>\n\n<p>控制台输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">pool-1-thread-1-----&gt;&gt;&gt;执行了任务\npool-1-thread-2-----&gt;&gt;&gt;执行了任务\npool-1-thread-2-----&gt;&gt;&gt;执行了任务\npool-1-thread-2-----&gt;&gt;&gt;执行了任务\npool-1-thread-3-----&gt;&gt;&gt;执行了任务</code></pre>\n\n<p>通过控制台的输出结果，我们可以看到5个任务是通过3个线程进行执行的，说明此线程池中存在三个线程对象</p>\n<p><font color=\"blue\" size=\"3\"><strong>案例3</strong></font>：演示newSingleThreadExecutor方法所获取到的线程池的特点</p>\n<p>测试类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ExecutorsDemo04 &#123;\n\n    &#x2F;&#x2F; 演示newSingleThreadExecutor方法所获取到的线程池的特点\n    public static void main(String[] args) &#123;\n\n        &#x2F;&#x2F; 获取线程池对象,初始化一个具有一个线程的线程池\n        ExecutorService threadPool &#x3D; Executors.newSingleThreadExecutor();\n\n        &#x2F;&#x2F; 提交任务\n        for(int x &#x3D; 0 ; x &lt; 5 ; x++) &#123;\n            threadPool.submit(() -&gt; &#123;\n                System.out.println(Thread.currentThread().getName() + &quot;-----&gt;&gt;&gt;执行了任务&quot;);\n            &#125;);\n        &#125;\n\n        &#x2F;&#x2F; 关闭线程池\n        threadPool.shutdown();\n    &#125;\n\n&#125;</code></pre>\n\n<p>控制台输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">pool-1-thread-1-----&gt;&gt;&gt;执行了任务\npool-1-thread-1-----&gt;&gt;&gt;执行了任务\npool-1-thread-1-----&gt;&gt;&gt;执行了任务\npool-1-thread-1-----&gt;&gt;&gt;执行了任务\npool-1-thread-1-----&gt;&gt;&gt;执行了任务</code></pre>\n\n<p>通过控制台的输出结果，我们可以看到5个任务是通过1个线程进行执行的,说明此线程池中只存在一个线程对象。</p>\n<p><font color=\"blue\" size=\"3\"><strong>案例4</strong></font>： 演示newSingleThreadScheduledExecutor方法所获取到的线程池的特点(初始化一个具有一个线程的线程池)</p>\n<p>测试类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ExecutorsDemo05 &#123;\n\n    &#x2F;&#x2F; 演示：newSingleThreadScheduledExecutor方法所获取到的线程池的第一个特点(初始化一个具有一个线程的线程池)\n    public static void main(String[] args) &#123;\n\n        &#x2F;&#x2F; 获取线程池对象\n        ScheduledExecutorService threadPool &#x3D; Executors.newSingleThreadScheduledExecutor();\n\n        &#x2F;&#x2F; 提交任务\n        for(int x &#x3D; 0 ; x &lt; 5 ; x++) &#123;\n            threadPool.submit(() -&gt; &#123;\n                System.out.println(Thread.currentThread().getName() + &quot;----&gt;&gt;执行了任务&quot;);\n            &#125;);\n        &#125;\n\n        &#x2F;&#x2F; 关闭线程池\n        threadPool.shutdown();\n    &#125;\n\n&#125;</code></pre>\n\n<p>控制台输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">pool-1-thread-1----&gt;&gt;执行了任务\npool-1-thread-1----&gt;&gt;执行了任务\npool-1-thread-1----&gt;&gt;执行了任务\npool-1-thread-1----&gt;&gt;执行了任务\npool-1-thread-1----&gt;&gt;执行了任务</code></pre>\n\n<p>通过控制台的输出结果，我们可以看到5个任务是通过1个线程进行执行的,说明此线程池中只存在一个线程对象。</p>\n<p><font color=\"blue\" size=\"3\"><strong>案例5</strong></font>： 演示newSingleThreadScheduledExecutor方法所获取到的线程池的特点(支持定时及周期性任务执行)</p>\n<p>ScheduledExecutorService中和定时以及周期性执行相关的方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;*\n\t定时执行\n\tcommand: 任务类对象\n\tdelay  : 延迟多长时间开始执行任务, 任务提交到线程池以后我们需要等待多长时间开始执行这个任务\n\tunit   : 指定时间操作单元\n*&#x2F;\npublic ScheduledFuture&lt;?&gt; schedule(Runnable command,long delay, TimeUnit unit);\n\n&#x2F;*\n\t周期性执行\n\tcommand: \t\t任务类对象\n\tinitialDelay: \t延迟多长时间开始第一次该执行任务, 任务提交到线程池以后我们需要等待多长时间开始第一次执行这个任务\n\tperiod:        \t下一次执行该任务所对应的时间间隔\n\tunit: \t\t\t指定时间操作单元\n*&#x2F;\npublic ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit);</code></pre>\n\n<p>测试类1(演示定时执行)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ExecutorsDemo06 &#123;\n\n    &#x2F;&#x2F; 演示newSingleThreadScheduledExecutor方法所获取到的线程池的特点(支持定时及周期性任务执行)\n    public static void main(String[] args) &#123;\n\n        &#x2F;&#x2F; 获取线程池对象\n        ScheduledExecutorService threadPool &#x3D; Executors.newSingleThreadScheduledExecutor();\n\n        &#x2F;&#x2F; 提交任务,10s以后开始执行该任务\n        threadPool.schedule( () -&gt; &#123;\n            System.out.println(Thread.currentThread().getName() + &quot;----&gt;&gt;&gt;执行了该任务&quot;);\n        &#125; , 10 , TimeUnit.SECONDS) ;\n\n        &#x2F;&#x2F; 关闭线程池\n        threadPool.shutdown();\n    &#125;\n\n&#125;</code></pre>\n\n<p>测试类2(演示周期性执行)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ExecutorsDemo07 &#123;\n\n    &#x2F;&#x2F; 演示newSingleThreadScheduledExecutor方法所获取到的线程池的特点(支持定时及周期性任务执行)\n    public static void main(String[] args) &#123;\n\n        &#x2F;&#x2F; 获取线程池对象\n        ScheduledExecutorService threadPool &#x3D; Executors.newSingleThreadScheduledExecutor();\n\n        &#x2F;&#x2F; 提交任务,10s以后开始第一次执行该任务，然后每隔1秒执行一次\n        threadPool.scheduleAtFixedRate( () -&gt; &#123;\n            System.out.println(Thread.currentThread().getName() + &quot;----&gt;&gt;&gt;执行了该任务&quot;);\n        &#125; , 10 ,1, TimeUnit.SECONDS) ;\n\n    &#125;\n\n&#125;</code></pre>\n\n<h3 id=\"2-3-2-ThreadPoolExecutor\"><a href=\"#2-3-2-ThreadPoolExecutor\" class=\"headerlink\" title=\"2.3.2 ThreadPoolExecutor\"></a>2.3.2 ThreadPoolExecutor</h3><h4 id=\"1-基本使用\"><a href=\"#1-基本使用\" class=\"headerlink\" title=\"1) 基本使用\"></a>1) 基本使用</h4><p>刚才我们是通过Executors中的静态方法去创建线程池的，通过查看源代码我们发现，其底层都是通过ThreadPoolExecutor构建的。比如：newFixedThreadPool方法的源码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static ExecutorService newFixedThreadPool(int nThreads) &#123;\n    \n    &#x2F;&#x2F; 创建了ThreadPoolExecutor对象，然后直接返回\n\treturn new ThreadPoolExecutor(nThreads, nThreads,0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue&lt;Runnable&gt;());\n&#125;</code></pre>\n\n<p>那么也可以使用ThreadPoolExecutor去创建线程池。</p>\n<p>ThreadPoolExecutor最完整的构造方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue&lt;Runnable&gt; workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler)</code></pre>\n\n<p>参数说明</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">corePoolSize：   核心线程的最大值，不能小于0\nmaximumPoolSize：最大线程数，不能小于等于0，maximumPoolSize &gt;&#x3D; corePoolSize\nkeepAliveTime：  空闲线程最大存活时间,不能小于0\nunit：           时间单位\nworkQueue：      任务队列，不能为null\nthreadFactory：  创建线程工厂,不能为null      \nhandler：        任务的拒绝策略,不能为null    </code></pre>\n\n<p>案例演示通过ThreadPoolExecutor创建线程池</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ThreadPoolExecutorDemo01 &#123;\n\n    &#x2F;&#x2F; 演示基本使用\n    public static void main(String[] args) &#123;\n\n        &#x2F;&#x2F; 通过ThreadPoolExecutor创建一个线程池对象\n        ThreadPoolExecutor threadPoolExecutor &#x3D; new ThreadPoolExecutor(1 , 3 , 60 , TimeUnit.SECONDS ,\n                new ArrayBlockingQueue&lt;Runnable&gt;(3) , Executors.defaultThreadFactory() , new ThreadPoolExecutor.AbortPolicy()) ;\n\n        &#x2F;**\n         * 以上代码表示的意思是：核心线程池中的线程数量最大为1,整个线程池中最多存在3个线程,空闲线程最大的存活时间为60,时间单位为秒,阻塞队列使用的是有界阻塞队列\n         * 容量为3,使用默认的线程工厂;以及默认的任务处理策略\n         *&#x2F;\n\n        &#x2F;&#x2F; 提交任务\n        threadPoolExecutor.submit( () -&gt; &#123;\n            System.out.println(Thread.currentThread().getName() + &quot;------&gt;&gt;&gt;执行了任务&quot;);\n        &#125;);\n\n        &#x2F;&#x2F; 关闭线程池\n        threadPoolExecutor.shutdown();\n\n    &#125;\n\n&#125;</code></pre>\n\n<h4 id=\"2-工作原理\"><a href=\"#2-工作原理\" class=\"headerlink\" title=\"2) 工作原理\"></a>2) 工作原理</h4><p>接下来我们就来研究一下线程池的工作原理，如下图所示</p>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571732060388.png\" alt=\"1571732060388\"> </p>\n<p>当我们通过submit方法向线程池中提交任务的时候，具体的工作流程如下：</p>\n<ol>\n<li>客户端每次提交一个任务，线程池就会在核心线程池中创建一个工作线程来执行这个任务。当核心线程池中的线程已满时，则进入下一步操作。</li>\n<li>把任务试图存储到工作队列中。如果工作队列没有满，则将新提交的任务存储在这个工作队列里，等待核心线程池中的空闲线程执行。如果工作队列满了，则进入下个流程。</li>\n<li>线程池会再次在非核心线程池区域去创建新工作线程来执行任务，直到当前线程池总线程数量超过最大线程数时，就是按照指定的任务处理策略处理多余的任务。</li>\n</ol>\n<p>举例说明：</p>\n<p>假如有一个工厂，工厂里面有10个工人(正式员工)，每个工人同时只能做一件任务。因此只要当10个工人中有工人是空闲的，来了任务就分配给空闲的工人做；当10个工人都有任务在做时，</p>\n<p>如果还来了任务，就把任务进行排队等待；如果说新任务数目增长的速度远远大于工人做任务的速度，那么此时工厂主管可能会想补救措施，比如重新招4个临时工人进来；然后就将任务也分配</p>\n<p>给这4个临时工人做；如果说着14个工人做任务的速度还是不够，此时工厂主管可能就要考虑不再接收新的任务或者抛弃前面的一些任务了。当这14个工人当中有人空闲时，而新任务增长的速度</p>\n<p>又比较缓慢，工厂主管可能就考虑辞掉4个临时工了，只保持原来的10个工人，毕竟请额外的工人是要花钱的。</p>\n<p>这里的工厂可以看做成是一个线程池，每一个工人可以看做成是一个线程。其中10个正式员工，可以看做成是核心线程池中的线程，临时工就是非核心线程池中的线程。当临时工处于空闲状态</p>\n<p>的时候，那么如果空闲的时间超过keepAliveTime所指定的时间，那么就会被销毁。</p>\n<h4 id=\"3-案例演示\"><a href=\"#3-案例演示\" class=\"headerlink\" title=\"3) 案例演示\"></a>3) 案例演示</h4><p>接下来我们就通过一段代码的断点测试，来演示一下线程池的工作原理。</p>\n<p>案例代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ThreadPoolExecutorDemo01 &#123;\n\n    public static void main(String[] args) &#123;\n\n        &#x2F;**\n         * 核心线程数量为1 ， 最大线程池数量为3, 任务容器的容量为1 ,空闲线程的最大存在时间为20s\n         *&#x2F;\n        ThreadPoolExecutor threadPoolExecutor &#x3D; new ThreadPoolExecutor(1 , 3 , 20 , TimeUnit.SECONDS ,\n                new ArrayBlockingQueue&lt;&gt;(1) , Executors.defaultThreadFactory() , new ThreadPoolExecutor.AbortPolicy()) ;\n\n        &#x2F;&#x2F; 提交3个任务，此时会产生一个核心线程,一个临时工线程，队列中会存在一个任务，20s后临时工线程被回收，核心线程不会被回收\n        for(int x &#x3D; 0 ; x &lt; 3 ; x++) &#123;\n            threadPoolExecutor.submit(() -&gt; &#123;\t\t&#x2F;&#x2F; 断点位置\n                System.out.println(Thread.currentThread().getName() + &quot;----&gt;&gt; 执行了任务&quot;);\n            &#125;);\n        &#125;\n\n    &#125;\n\n&#125;</code></pre>\n\n<p>初次debug方式启动线程，查看变量值</p>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571735388181.png\" alt=\"1571735388181\"> </p>\n<p>由于此时还没有提交任务，因此线程池中的线程数量为0，工作队列的任务数量也为0；提交一个任务</p>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571735465100.png\" alt=\"1571735465100\"> </p>\n<p>再次查看各个值的变化</p>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571735607347.png\" alt=\"1571735607347\"> </p>\n<p>再次提交一个任务</p>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571735465100.png\" alt=\"1571735465100\"> </p>\n<p>再次查看各个值的变化</p>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571735715977.png\" alt=\"1571735715977\"> </p>\n<p>此时会把第二个任务存储到工作队列中，因此工作队列的值为1了。再次提交一个任务</p>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571735465100.png\" alt=\"1571735465100\"> </p>\n<p>再次查看各个值的变化</p>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571735904991.png\" alt=\"1571735904991\"> </p>\n<p>此时3个任务都以及提交完毕，断点跳过。经过20s以后，再次查看该进程中的线程。</p>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571736824748.png\" alt=\"1571736824748\"> </p>\n<p>我们发现非核心线程已经被线程池回收了。</p>\n<h4 id=\"4-任务拒绝策略\"><a href=\"#4-任务拒绝策略\" class=\"headerlink\" title=\"4) 任务拒绝策略\"></a>4) 任务拒绝策略</h4><p>RejectedExecutionHandler是jdk提供的一个任务拒绝策略接口，它下面存在4个子类。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">ThreadPoolExecutor.AbortPolicy: \t\t    丢弃任务并抛出RejectedExecutionException异常。是默认的策略。\nThreadPoolExecutor.DiscardPolicy： \t\t   丢弃任务，但是不抛出异常 这是不推荐的做法。\nThreadPoolExecutor.DiscardOldestPolicy：    抛弃队列中等待最久的任务 然后把当前任务加入队列中。\nThreadPoolExecutor.CallerRunsPolicy:        调用任务的run()方法绕过线程池直接执行。</code></pre>\n\n<p>注：明确线程池对多可执行的任务数 &#x3D; 队列容量 + 最大线程数</p>\n<p><font color=\"blue\" size=\"3\"><strong>案例演示1</strong></font>：演示ThreadPoolExecutor.AbortPolicy任务处理策略</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ThreadPoolExecutorDemo01 &#123;\n\n    public static void main(String[] args) &#123;\n\n        &#x2F;**\n         * 核心线程数量为1 ， 最大线程池数量为3, 任务容器的容量为1 ,空闲线程的最大存在时间为20s\n         *&#x2F;\n        ThreadPoolExecutor threadPoolExecutor &#x3D; new ThreadPoolExecutor(1 , 3 , 20 , TimeUnit.SECONDS ,\n                new ArrayBlockingQueue&lt;&gt;(1) , Executors.defaultThreadFactory() , new ThreadPoolExecutor.AbortPolicy()) ;\n\n        &#x2F;&#x2F; 提交5个任务，而该线程池最多可以处理4个任务，当我们使用AbortPolicy这个任务处理策略的时候，就会抛出异常\n        for(int x &#x3D; 0 ; x &lt; 5 ; x++) &#123;\n            threadPoolExecutor.submit(() -&gt; &#123;\n                System.out.println(Thread.currentThread().getName() + &quot;----&gt;&gt; 执行了任务&quot;);\n            &#125;);\n        &#125;\n\n    &#125;\n\n&#125;</code></pre>\n\n<p>控制台输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Exception in thread &quot;main&quot; java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@566776ad[Not completed, task &#x3D; java.util.concurrent.Executors$RunnableAdapter@edf4efb[Wrapped task &#x3D; com.itheima.javase.thread.pool.demo04.ThreadPoolExecutorDemo01$$Lambda$14&#x2F;0x0000000100066840@2f7a2457]] rejected from java.util.concurrent.ThreadPoolExecutor@6108b2d7[Running, pool size &#x3D; 3, active threads &#x3D; 3, queued tasks &#x3D; 1, completed tasks &#x3D; 0]\n\tat java.base&#x2F;java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2055)\n\tat java.base&#x2F;java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:825)\n\tat java.base&#x2F;java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1355)\n\tat java.base&#x2F;java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:118)\n\tat com.itheima.javase.thread.pool.demo04.ThreadPoolExecutorDemo01.main(ThreadPoolExecutorDemo01.java:20)\npool-1-thread-1----&gt;&gt; 执行了任务\npool-1-thread-3----&gt;&gt; 执行了任务\npool-1-thread-2----&gt;&gt; 执行了任务\npool-1-thread-3----&gt;&gt; 执行了任务</code></pre>\n\n<p>控制台报错，仅仅执行了4个任务，有一个任务被丢弃了</p>\n<p><font color=\"blue\" size=\"3\"><strong>案例演示2</strong></font>：演示ThreadPoolExecutor.DiscardPolicy任务处理策略</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ThreadPoolExecutorDemo02 &#123;\n\n    public static void main(String[] args) &#123;\n\n        &#x2F;**\n         * 核心线程数量为1 ， 最大线程池数量为3, 任务容器的容量为1 ,空闲线程的最大存在时间为20s\n         *&#x2F;\n        ThreadPoolExecutor threadPoolExecutor &#x3D; new ThreadPoolExecutor(1 , 3 , 20 , TimeUnit.SECONDS ,\n                new ArrayBlockingQueue&lt;&gt;(1) , Executors.defaultThreadFactory() , new ThreadPoolExecutor.DiscardPolicy()) ;\n\n        &#x2F;&#x2F; 提交5个任务，而该线程池最多可以处理4个任务，当我们使用DiscardPolicy这个任务处理策略的时候，控制台不会报错\n        for(int x &#x3D; 0 ; x &lt; 5 ; x++) &#123;\n            threadPoolExecutor.submit(() -&gt; &#123;\n                System.out.println(Thread.currentThread().getName() + &quot;----&gt;&gt; 执行了任务&quot;);\n            &#125;);\n        &#125;\n\n    &#125;\n&#125;</code></pre>\n\n<p>控制台输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">pool-1-thread-1----&gt;&gt; 执行了任务\npool-1-thread-1----&gt;&gt; 执行了任务\npool-1-thread-3----&gt;&gt; 执行了任务\npool-1-thread-2----&gt;&gt; 执行了任务</code></pre>\n\n<p>控制台没有报错，仅仅执行了4个任务，有一个任务被丢弃了</p>\n<p><font color=\"blue\" size=\"3\"><strong>案例演示3</strong></font>：演示ThreadPoolExecutor.DiscardOldestPolicy任务处理策略</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ThreadPoolExecutorDemo02 &#123;\n\n    public static void main(String[] args) &#123;\n\n        &#x2F;**\n         * 核心线程数量为1 ， 最大线程池数量为3, 任务容器的容量为1 ,空闲线程的最大存在时间为20s\n         *&#x2F;\n        ThreadPoolExecutor threadPoolExecutor;\n        threadPoolExecutor &#x3D; new ThreadPoolExecutor(1 , 3 , 20 , TimeUnit.SECONDS ,\n                new ArrayBlockingQueue&lt;&gt;(1) , Executors.defaultThreadFactory() , new ThreadPoolExecutor.DiscardOldestPolicy());\n\n        &#x2F;&#x2F; 提交5个任务\n        for(int x &#x3D; 0 ; x &lt; 5 ; x++) &#123;\n\n            &#x2F;&#x2F; 定义一个变量，来指定指定当前执行的任务;这个变量需要被final修饰\n            final int y &#x3D; x ;\n            threadPoolExecutor.submit(() -&gt; &#123;\n                System.out.println(Thread.currentThread().getName() + &quot;----&gt;&gt; 执行了任务&quot; + y);\n            &#125;);\n            \n        &#125;\n\n    &#125;\n&#125;</code></pre>\n\n<p>控制台输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">pool-1-thread-2----&gt;&gt; 执行了任务2\npool-1-thread-1----&gt;&gt; 执行了任务0\npool-1-thread-3----&gt;&gt; 执行了任务3\npool-1-thread-1----&gt;&gt; 执行了任务4</code></pre>\n\n<p>由于任务1在线程池中等待时间最长，因此任务1被丢弃。</p>\n<p><font color=\"blue\" size=\"3\"><strong>案例演示4</strong></font>：演示ThreadPoolExecutor.CallerRunsPolicy任务处理策略</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ThreadPoolExecutorDemo04 &#123;\n\n    public static void main(String[] args) &#123;\n\n        &#x2F;**\n         * 核心线程数量为1 ， 最大线程池数量为3, 任务容器的容量为1 ,空闲线程的最大存在时间为20s\n         *&#x2F;\n        ThreadPoolExecutor threadPoolExecutor;\n        threadPoolExecutor &#x3D; new ThreadPoolExecutor(1 , 3 , 20 , TimeUnit.SECONDS ,\n                new ArrayBlockingQueue&lt;&gt;(1) , Executors.defaultThreadFactory() , new ThreadPoolExecutor.CallerRunsPolicy());\n\n        &#x2F;&#x2F; 提交5个任务\n        for(int x &#x3D; 0 ; x &lt; 5 ; x++) &#123;\n            threadPoolExecutor.submit(() -&gt; &#123;\n                System.out.println(Thread.currentThread().getName() + &quot;----&gt;&gt; 执行了任务&quot;);\n            &#125;);\n\n        &#125;\n\n    &#125;\n\n&#125;</code></pre>\n\n<p>控制台输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">pool-1-thread-1----&gt;&gt; 执行了任务\npool-1-thread-3----&gt;&gt; 执行了任务\npool-1-thread-2----&gt;&gt; 执行了任务\npool-1-thread-1----&gt;&gt; 执行了任务\nmain----&gt;&gt; 执行了任务</code></pre>\n\n<p>通过控制台的输出，我们可以看到次策略没有通过线程池中的线程执行任务，而是直接调用任务的run()方法绕过线程池直接执行。</p>\n<h1 id=\"3-volatile关键字\"><a href=\"#3-volatile关键字\" class=\"headerlink\" title=\"3 volatile关键字\"></a>3 volatile关键字</h1><h2 id=\"3-1-看程序说结果\"><a href=\"#3-1-看程序说结果\" class=\"headerlink\" title=\"3.1 看程序说结果\"></a>3.1 看程序说结果</h2><p>分析如下程序，说出在控制台的输出结果。</p>\n<p>Thread的子类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class VolatileThread extends Thread &#123;\n\n    &#x2F;&#x2F; 定义成员变量\n    private boolean flag &#x3D; false ;\n    public boolean isFlag() &#123; return flag;&#125;\n\n    @Override\n    public void run() &#123;\n\n        &#x2F;&#x2F; 线程休眠1秒\n        try &#123;\n            Thread.sleep(1000);\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n        &#125;\n\n        &#x2F;&#x2F; 将flag的值更改为true\n        this.flag &#x3D; true ;\n        System.out.println(&quot;flag&#x3D;&quot; + flag);\n\n    &#125;\n&#125;</code></pre>\n\n<p>测试类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class VolatileThreadDemo01 &#123;\n    \n    public static void main(String[] args) &#123;\n\n        &#x2F;&#x2F; 创建VolatileThread线程对象\n        VolatileThread volatileThread &#x3D; new VolatileThread() ;\n        volatileThread.start();\n\n        &#x2F;&#x2F; 在main线程中获取开启的线程中flag的值\n        while(true) &#123;\n            System.out.println(&quot;main线程中获取开启的线程中flag的值为&quot; + volatileThread.isFlag());\n        &#125;\n        \n    &#125;\n&#125;</code></pre>\n\n<p>控制台输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">前面是false，过了一段时间之后就变成了true</code></pre>\n\n<p>按照我们的分析，当我们把volatileThread线程启动起来以后，那么volatileThread线程开始执行。在volatileThread线程的run方法中，线程休眠1s，休眠一秒以后那么flag的值应该为</p>\n<p>true，此时我们在主线程中不停的获取flag的值。发现前面释放false，后面是true</p>\n<p>信息，那么这是为什么呢？要想知道原因，那么我们就需要学习一下JMM。</p>\n<h2 id=\"3-2-JMM\"><a href=\"#3-2-JMM\" class=\"headerlink\" title=\"3.2 JMM\"></a>3.2 JMM</h2><p>概述：JMM(Java Memory Model)Java内存模型,是java虚拟机规范中所定义的一种内存模型。</p>\n<p>Java内存模型(Java Memory Model)描述了Java程序中各种变量(线程共享变量)的访问规则，以及在JVM中将变量存储到内存和从内存中读取变量这样的底层细节。</p>\n<p>特点：</p>\n<ol>\n<li><p>所有的共享变量都存储于主内存(计算机的RAM)这里所说的变量指的是实例变量和类变量。不包含局部变量，因为局部变量是线程私有的，因此不存在竞争问题。</p>\n</li>\n<li><p>每一个线程还存在自己的工作内存，线程的工作内存，保留了被线程使用的变量的工作副本。</p>\n</li>\n<li><p>线程对变量的所有的操作(读，写)都必须在工作内存中完成，而不能直接读写主内存中的变量，不同线程之间也不能直接访问对方工作内存中的变量，线程间变量的值的传递需要通过主</p>\n<p>内存完成。</p>\n</li>\n</ol>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571743818653.png\" alt=\"1571743818653\"> </p>\n<h2 id=\"3-3-问题分析\"><a href=\"#3-3-问题分析\" class=\"headerlink\" title=\"3.3 问题分析\"></a>3.3 问题分析</h2><p>了解了一下JMM,那么接下来我们就来分析一下上述程序产生问题的原因。</p>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571744627663.png\" alt=\"1571744627663\">  </p>\n<p>产生问题的流程分析：</p>\n<ol>\n<li><p>VolatileThread线程从主内存读取到数据放入其对应的工作内存</p>\n</li>\n<li><p>将flag的值更改为true，但是这个时候flag的值还没有回写主内存</p>\n</li>\n<li><p>此时main线程读取到了flag的值并将其放入到自己的工作内存中，此时flag的值为false</p>\n</li>\n<li><p>VolatileThread线程将flag的值写回到主内存，但是main函数里面的while(true)调用的是系统比较底层的代码，速度快，快到没有时间再去读取主内存中的值，所以while(true)</p>\n<p>读取到的值一直是false。(如果有一个时刻main线程从主内存中读取到了flag的最新值，那么if语句就可以执行，main线程何时从主内存中读取最新的值，我们无法控制)</p>\n</li>\n</ol>\n<p>我们可以让主线程执行慢一点，执行慢一点以后，在某一个时刻，可能就会读取到主内存中最新的flag的值，那么if语句就可以进行执行。</p>\n<p>测试类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class VolatileThreadDemo02 &#123;\n\n    public static void main(String[] args) throws InterruptedException &#123;\n\n        &#x2F;&#x2F; 创建VolatileThread线程对象\n        VolatileThread volatileThread &#x3D; new VolatileThread() ;\n        volatileThread.start();\n\n        &#x2F;&#x2F; main方法\n        while(true) &#123;\n            if(volatileThread.isFlag()) &#123;\n                System.out.println(&quot;执行了&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);\n            &#125;\n\n            &#x2F;&#x2F; 让线程休眠100毫秒\n            TimeUnit.MILLISECONDS.sleep(100);\n        &#125;\n\n    &#125;\n&#125;</code></pre>\n\n<p>控制台输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">flag&#x3D;true\n执行了&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n执行了&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n执行了&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n....</code></pre>\n\n<p>此时我们可以看到if语句已经执行了。当然我们在真实开发中可能不能使用这种方式来处理这个问题，那么这个问题应该怎么处理呢？我们就需要学习下一小节的内容。</p>\n<h2 id=\"3-4-问题处理\"><a href=\"#3-4-问题处理\" class=\"headerlink\" title=\"3.4 问题处理\"></a>3.4 问题处理</h2><h3 id=\"3-4-1-加锁\"><a href=\"#3-4-1-加锁\" class=\"headerlink\" title=\"3.4.1 加锁\"></a>3.4.1 加锁</h3><p>第一种处理方案，我们可以通过加锁的方式进行处理。</p>\n<p>测试类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class VolatileThreadDemo03 &#123;\n\n    public static void main(String[] args) throws InterruptedException &#123;\n\n        &#x2F;&#x2F; 创建VolatileThread线程对象\n        VolatileThread volatileThread &#x3D; new VolatileThread() ;\n        volatileThread.start();\n\n        &#x2F;&#x2F; main方法\n        while(true) &#123;\n\n            &#x2F;&#x2F; 加锁进行问题处理\n            synchronized (volatileThread) &#123;\n                if(volatileThread.isFlag()) &#123;\n                    System.out.println(&quot;执行了&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);\n                &#125;\n            &#125;\n\n        &#125;\n\n    &#125;\n&#125;</code></pre>\n\n<p>控制台输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">flag&#x3D;true\n执行了&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n执行了&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n执行了&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n....</code></pre>\n\n\n\n<p>工作原理说明</p>\n<p>对上述代码加锁完毕以后，某一个线程支持该程序的过程如下：</p>\n<p>a.线程获得锁</p>\n<p>b.清空工作内存</p>\n<p>c.从主内存拷贝共享变量最新的值到工作内存成为副本</p>\n<p>d.执行代码</p>\n<p>e.将修改后的副本的值刷新回主内存中</p>\n<p>f.线程释放锁</p>\n<h3 id=\"3-4-2-volatile关键字\"><a href=\"#3-4-2-volatile关键字\" class=\"headerlink\" title=\"3.4.2 volatile关键字\"></a>3.4.2 volatile关键字</h3><p>第二种处理方案，我们可以通过volatile关键字来修饰flag变量。</p>\n<p>线程类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class VolatileThread extends Thread &#123;\n\n    &#x2F;&#x2F; 定义成员变量\n    private volatile boolean flag &#x3D; false ;\n    public boolean isFlag() &#123; return flag;&#125;\n\n    @Override\n    public void run() &#123;\n\n        &#x2F;&#x2F; 线程休眠1秒\n        try &#123;\n            Thread.sleep(1000);\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n        &#125;\n\n        &#x2F;&#x2F; 将flag的值更改为true\n        this.flag &#x3D; true ;\n        System.out.println(&quot;flag&#x3D;&quot; + flag);\n\n    &#125;\n&#125;\n&#x2F;&#x2F;--------------------------------更新之后的案例-------------------------------------------\npublic class VolatileTest extends Thread&#123;\n    boolean flag &#x3D; false;\n    int i &#x3D; 0;\n\n    public void run() &#123;\n        while (!flag) &#123;\n            i++;\n        &#125;\n        System.out.println(&quot;stope&quot; + i);\n    &#125;\n\n    public static void main(String[] args) throws Exception &#123;\n        VolatileTest vt &#x3D; new VolatileTest();\n        vt.start();\n\n        Thread.sleep(10);\n        vt.flag &#x3D; true;\n\n    &#125;\n&#125;</code></pre>\n\n<p>控制台输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">flag&#x3D;true\n执行了&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n执行了&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n执行了&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n....</code></pre>\n\n\n\n<p>工作原理说明</p>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571746088704.png\" alt=\"1571746088704\"> </p>\n<p>执行流程分析</p>\n<ol>\n<li>VolatileThread线程从主内存读取到数据放入其对应的工作内存</li>\n<li>将flag的值更改为true，但是这个时候flag的值还没有回写主内存</li>\n<li>此时main线程读取到了flag的值并将其放入到自己的工作内存中，此时flag的值为false</li>\n<li>VolatileThread线程将flag的值写到主内存</li>\n<li>main线程工作内存中的flag变量副本失效</li>\n<li>main线程再次使用flag时，main线程会从主内存读取最新的值，放入到工作内存中，然后在进行使用</li>\n</ol>\n<p>总结： volatile保证不同线程对共享变量操作的可见性，也就是说一个线程修改了volatile修饰的变量，当修改写回主内存时，另外一个线程立即看到最新的值。</p>\n<p>​      但是volatile不保证原子性(关于原子性问题，我们在下面的小节中会介绍)。</p>\n<p>volatile与synchronized的区别：</p>\n<ol>\n<li><p>volatile只能修饰实例变量和类变量，而synchronized可以修饰方法，以及代码块。</p>\n</li>\n<li><p>volatile保证数据的可见性，但是不保证原子性(多线程进行写操作，不保证线程安全);而synchronized是一种排他（互斥）的机制(因此有时我们也将synchronized这种锁称</p>\n<p>之为排他（互斥）锁)，synchronized修饰的代码块，被修饰的代码块称之为同步代码块，无法被中断可以保证原子性，也可以间接的保证可见性。</p>\n</li>\n</ol>\n<h1 id=\"4-原子性\"><a href=\"#4-原子性\" class=\"headerlink\" title=\"4 原子性\"></a>4 原子性</h1><p>概述：所谓的原子性是指在一次操作或者多次操作中，要么所有的操作全部都得到了执行并且不会受到任何因素的干扰而中断，要么所有的操作都不执行，多个操作是一个不可以分割的整体。</p>\n<p>&#x2F;&#x2F;比如说：你喂你女朋友吃冰淇淋，如果没有女朋友，你就假想一下，实在不行，你就喂你旁边的哥们吃一口冰淇淋。这就是一个不可分割的整体，一个是你喂，一个是她吃。这就是一个整体，如果没有她吃，那么你喂就没有意义，如果没有你喂，她吃就没有意义。</p>\n<p>&#x2F;&#x2F;比如：从张三的账户给李四的账户转1000元，这个动作将包含两个基本的操作：从张三的账户扣除1000元，给李四的账户增加1000元。这两个操作必须符合原子性的要求，要么都成功要么</p>\n<p>都失败。</p>\n<h2 id=\"4-1-看程序说结果\"><a href=\"#4-1-看程序说结果\" class=\"headerlink\" title=\"4.1 看程序说结果\"></a>4.1 看程序说结果</h2><p>分析如下程序的执行结果</p>\n<p>线程类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class VolatileAtomicThread implements Runnable &#123;\n\n    &#x2F;&#x2F; 定义一个int类型的变量\n    private int count &#x3D; 0 ;\n\n    @Override\n    public void run() &#123;\n        \n        &#x2F;&#x2F; 对该变量进行++操作，100次\n        for(int x &#x3D; 0 ; x &lt; 100 ; x++) &#123;\n            count++ ;\t\t\t\t\t\n            System.out.println(&quot;冰淇淋的个数 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; &quot; + count);\n        &#125;\n        \n    &#125;\n\n&#125;</code></pre>\n\n<p>测试类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class VolatileAtomicThreadDemo &#123;\n\n    public static void main(String[] args) &#123;\n\n        &#x2F;&#x2F; 创建VolatileAtomicThread对象\n        VolatileAtomicThread volatileAtomicThread &#x3D; new VolatileAtomicThread() ;\n\n        &#x2F;&#x2F; 开启100个线程对count进行++操作\n        for(int x &#x3D; 0 ; x &lt; 100 ; x++) &#123;\n            new Thread(volatileAtomicThread).start();\n        &#125;\n        \n    &#125;\n\n&#125;</code></pre>\n\n<p>程序分析：我们在主线程中通过for循环启动了100个线程，每一个线程都会对VolatileAtomicThread类中的count加100次。那么直接结果应该是10000。但是真正的执行结果和我们分析</p>\n<p>的是否一样呢？运行程序(多运行几次)，查看控制台输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">....\ncount &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; 9997\ncount &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; 9998\ncount &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; 9999</code></pre>\n\n<p>通过控制台的输出，我们可以看到最终count的结果可能并不是10000。接下来我们就来分析一下问题产生的原因。</p>\n<h2 id=\"4-2-问题分析说明\"><a href=\"#4-2-问题分析说明\" class=\"headerlink\" title=\"4.2 问题分析说明\"></a>4.2 问题分析说明</h2><p>以上问题主要是发生在count++操作上：</p>\n<p>count++操作包含3个步骤：</p>\n<ul>\n<li>从主内存中读取数据到工作内存</li>\n<li>对工作内存中的数据进行++操作</li>\n<li>将工作内存中的数据写回到主内存</li>\n</ul>\n<p>count++操作不是一个原子性操作，也就是说在某一个时刻对某一个操作的执行，有可能被其他的线程打断。</p>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571794778139.png\" alt=\"1571794778139\"> </p>\n<p>产生问题的执行流程分析：</p>\n<ol>\n<li><p>假设此时count的值是100，线程A需要对改变量进行自增1的操作，首先它需要从主内存中读取变量count的值。由于CPU的切换关系，此时CPU的执行权被切换到了B线程。A线程就处</p>\n<p>于就绪状态，B线程处于运行状态。</p>\n</li>\n<li><p>线程B也需要从主内存中读取count变量的值,由于线程A没有对count值做任何修改因此此时B读取到的数据还是100</p>\n</li>\n<li><p>线程B工作内存中对count执行了+1操作，但是未刷新之主内存中</p>\n</li>\n<li><p>此时CPU的执行权切换到了A线程上，由于此时线程B没有将工作内存中的数据刷新到主内存，因此A线程工作内存中的变量值还是100，没有失效。A线程对工作内存中的数据进行了+1操作。</p>\n</li>\n<li><p>线程B将101写入到主内存</p>\n</li>\n<li><p>线程A将101写入到主内存</p>\n</li>\n</ol>\n<p>虽然计算了2次，但是只对A进行了1次修改。</p>\n<h2 id=\"4-3-volatile原子性测试\"><a href=\"#4-3-volatile原子性测试\" class=\"headerlink\" title=\"4.3 volatile原子性测试\"></a>4.3 volatile原子性测试</h2><p>我们刚才说到了volatile在多线程环境下只保证了共享变量在多个线程间的可见性，但是不保证原子性。那么接下来我们就来做一个测试。测试的思想，就是使用volatile修饰count。</p>\n<p>线程类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class VolatileAtomicThread implements Runnable &#123;\n\n    &#x2F;&#x2F; 定义一个int类型的变量,并且使用volatile修饰\n    private volatile int count &#x3D; 0 ;\n\n    @Override\n    public void run() &#123;\n        \n        &#x2F;&#x2F; 对该变量进行++操作，100次\n        for(int x &#x3D; 0 ; x &lt; 100 ; x++) &#123;\n            count++ ;\t\t\t\t\t\n            System.out.println(&quot;count &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; &quot; + count);\n        &#125;\n        \n    &#125;\n\n&#125;</code></pre>\n\n<p>控制台输出结果(需要运行多次)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">...\ncount &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; 9997\ncount &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; 9998\ncount &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; 9999</code></pre>\n\n<p>通过控制台结果的输出，我们可以看到程序还是会出现问题。因此也就证明volatile关键字是不保证原子性的。</p>\n<h2 id=\"4-4-volatile使用场景\"><a href=\"#4-4-volatile使用场景\" class=\"headerlink\" title=\"4.4 volatile使用场景\"></a>4.4 volatile使用场景</h2><p>volatile关键字不保证原子性操作，那么同学们可能会存在一些疑问，volatile关键字在什么情况下进行使用呢？这里我们举两个基本的使用场景。</p>\n<h3 id=\"4-4-1-状态标志\"><a href=\"#4-4-1-状态标志\" class=\"headerlink\" title=\"4.4.1 状态标志\"></a>4.4.1 状态标志</h3><p>比如现在存在一个线程不断向控制台输出一段话”传智播客中国IT教育的标杆….”,当这个线程执行5秒以后，将该线程结束。</p>\n<p>实现思路：定义一个boolean类型的变量，这个变量就相当于一个标志。当这个变量的值为true的时候，线程一直执行，10秒以后我们把这个变量的值更改为false，此时结束该线程的执行。</p>\n<p>为了保证一个线程对这个变量的修改，另外一个线程立马可以看到，这个变量就需要通过volatile关键字进行修饰。</p>\n<p>线程类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class VolatileUseThread implements Runnable &#123;\n\n    &#x2F;&#x2F; 定义标志变量\n    private volatile boolean shutdown &#x3D; false ;\n\n    @Override\n    public void run() &#123;\n\n        while(!shutdown) &#123;\n            System.out.println(&quot;传智播客中国IT教育的标杆....&quot;);\n        &#125;\n\n    &#125;\n\n    &#x2F;&#x2F; 关闭线程\n    public void shutdown() &#123;\n        this.shutdown &#x3D; true ;\n    &#125;\n\n&#125;</code></pre>\n\n<p>测试类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class VolatileUseThreadDemo01 &#123;\n\n    public static void main(String[] args) throws InterruptedException &#123;\n\n        &#x2F;&#x2F; 创建线程任务类对象\n        VolatileUseThread volatileUseThread &#x3D; new VolatileUseThread() ;\n\n        &#x2F;&#x2F; 创建线程对象\n        Thread thread &#x3D; new Thread(volatileUseThread);\n\n        &#x2F;&#x2F; 启动线程\n        thread.start();\n\n        &#x2F;&#x2F; 主线程休眠\n        TimeUnit.SECONDS.sleep(5);\n\n        &#x2F;&#x2F; 关闭线程\n        volatileUseThread.shutdown();\n\n    &#125;\n\n&#125;</code></pre>\n\n<p>观察控制台输出，volatileUseThread线程执行5秒以后程序结束。</p>\n<h3 id=\"4-4-2-独立观察\"><a href=\"#4-4-2-独立观察\" class=\"headerlink\" title=\"4.4.2 独立观察\"></a>4.4.2 独立观察</h3><p>&#x2F;&#x2F;AI养猪。。。。</p>\n<p>&#x2F;&#x2F;设备区测量温度</p>\n<p>&#x2F;&#x2F;当温度高了。。。需要给猪开空调。。。加冰棍。。。加喝的水。。。</p>\n<p>volatile的另一种简单使用场景是：定期”发布”观察结果供程序内部使用。例如，假设有一种环境传感器能够感觉环境温度。一个后台线程可能会每隔几秒读取一次该传感器数据，并更新包</p>\n<p>含这个volatile变量的值。然后，其他线程可以读取这个变量，从而随时能够看到最新的温度值。这种使用就是多个线程操作共享变量，但是是有一个线程对其进行写操作，其他的线程都是读。</p>\n<p>我们可以设计一个程序，模拟上面的温度传感器案例。</p>\n<p>实现步说明</p>\n<ol>\n<li><p>定义一个温度传感器(TemperatureSensor)的类,在该类中定义两个成员变量(temperature(温度值)，type(传感器的类型))，temperature变量需要被volatile修饰</p>\n</li>\n<li><p>定义一个读取温度传感器的线程的任务类(ReadTemperatureRunnable)，该类需要定义一个TemperatureSensor类型的成员变量(该线程需要读取温度传感器的数据)</p>\n</li>\n<li><p>定义一个定时采集温度的线程任务类(GatherTemperatureRunnable)，该类需要定义一个TemperatureSensor类型的成员变量(该线程需要将读到的温度设置给传感器)</p>\n</li>\n<li><p>创建测试类(TemperatureSensorDemo)</p>\n<ol>\n<li>创建TemperatureSensor对象</li>\n<li>创建ReadTemperatureRunnable类对象，把TemperatureSensor作为构造方法的参数传递过来</li>\n<li>创建GatherTemperatureRunnable类对象，把TemperatureSensor作为构造方法的参数传递过来</li>\n<li>创建2个Thread对象，并启动，把第二步所创建的对象作为构造方法参数传递过来，这两个线程负责读取TemperatureSensor中的温度数据</li>\n<li>创建1个Thread对象，并启动，把第三步所创建的对象作为构造方法参数传递过来，这个线程负责读取定时采集数据中的温度数据</li>\n</ol>\n</li>\n</ol>\n<p>TemperatureSensor类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class TemperatureSensor &#123;        &#x2F;&#x2F; 温度传感器类\n\n    private volatile int temperature ;  &#x2F;&#x2F; 温度值\n\n    private String type ;               &#x2F;&#x2F; 传感器的类型\n\n    public int getTemperature() &#123;\n        return temperature;\n    &#125;\n\n    public void setTemperature(int temperature) &#123;\n        this.temperature &#x3D; temperature;\n    &#125;\n\n    public String getType() &#123;\n        return type;\n    &#125;\n\n    public void setType(String type) &#123;\n        this.type &#x3D; type;\n    &#125;\n&#125;</code></pre>\n\n<p>ReadTemperatureRunnable类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ReadTemperatureRunnable implements Runnable &#123;\n\n    &#x2F;&#x2F; 温度传感器\n    private TemperatureSensor temperatureSensor ;\n    public ReadTemperatureRunnable(TemperatureSensor temperatureSensor) &#123;\n        this.temperatureSensor &#x3D; temperatureSensor ;\n    &#125;\n\n    @Override\n    public void run() &#123;\n\n        &#x2F;&#x2F; 不断的读取温度传感器中的数据\n        while(true) &#123;\n\n            &#x2F;&#x2F; 读取数据\n            System.out.println(Thread.currentThread().getName() + &quot;---读取到的温度数据为------&gt;&gt;&gt; &quot; + temperatureSensor.getTemperature());\n\n            try &#123;\n                &#x2F;&#x2F; 让线程休眠100毫秒，便于观察\n                TimeUnit.MILLISECONDS.sleep(100);\n            &#125; catch (InterruptedException e) &#123;\n                e.printStackTrace();\n            &#125;\n\n        &#125;\n\n    &#125;\n\n&#125;</code></pre>\n\n<p>GatherTemperatureRunnable类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class GatherTemperatureRunnable implements Runnable &#123;\n\n    &#x2F;&#x2F; 温度传感器\n    private TemperatureSensor temperatureSensor ;\n    public GatherTemperatureRunnable(TemperatureSensor temperatureSensor) &#123;\n        this.temperatureSensor &#x3D; temperatureSensor ;\n    &#125;\n\n    @Override\n    public void run() &#123;\n\n        &#x2F;&#x2F; 定义一个变量，表示环境初始温度\n        int temperature &#x3D; 23 ;\n\n        &#x2F;&#x2F; 不断进行数据采集\n        while(true) &#123;\n\n            &#x2F;&#x2F; 将采集到的数据设置给温度传感器\n            System.out.println(Thread.currentThread().getName() + &quot;-----采集到的数据为-----&gt;&gt;&gt; &quot; + temperature);\n            temperatureSensor.setTemperature(temperature);\n\n            try &#123;\n                &#x2F;&#x2F; 线程休眠2秒,模拟每隔两秒采集一次数据\n                TimeUnit.SECONDS.sleep(2);\n            &#125; catch (InterruptedException e) &#123;\n                e.printStackTrace();\n            &#125;\n\n            &#x2F;&#x2F; 环境温度改变\n            temperature +&#x3D; 2 ;\n\n        &#125;\n\n    &#125;\n\n&#125;</code></pre>\n\n<p>测试类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class TemperatureSensorDemo &#123;\n\n    public static void main(String[] args) &#123;\n\n        &#x2F;&#x2F; 创建TemperatureSensor对象\n        TemperatureSensor temperatureSensor &#x3D; new TemperatureSensor();\n\n        &#x2F;&#x2F; 创建ReadTemperatureRunnable类对象\n        ReadTemperatureRunnable readTemperatureRunnable &#x3D; new ReadTemperatureRunnable(temperatureSensor) ;\n\n        &#x2F;&#x2F; 创建GatherTemperatureRunnable类对象\n        GatherTemperatureRunnable gatherTemperatureRunnable &#x3D; new GatherTemperatureRunnable(temperatureSensor) ;\n\n        &#x2F;&#x2F; 创建2个Thread对象，并启动; 这两个线程负责读取TemperatureSensor中的温度数据\n        for(int x &#x3D; 0 ; x &lt; 2 ; x++) &#123;\n            new Thread(readTemperatureRunnable).start();\n        &#125;\n\n        &#x2F;&#x2F; 创建1个Thread对象，并启动，这个线程负责读取定时采集数据中的温度数据\n        Thread gatherThread &#x3D; new Thread(gatherTemperatureRunnable);\n        gatherThread.setName(&quot;温度采集线程&quot;);\n        gatherThread.start();\n\n    &#125;\n\n&#125;</code></pre>\n\n<p>控制台输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">...\n温度采集线程-----采集到的数据为-----&gt;&gt;&gt; 23\nThread-0---读取到的温度数据为------&gt;&gt;&gt; 23\n...\n温度采集线程-----采集到的数据为-----&gt;&gt;&gt; 25\nThread-1---读取到的温度数据为------&gt;&gt;&gt; 25\n...</code></pre>\n\n<p>通过控制台的输出，我们可以看到当温度采集线程刚采集到环境温度以后，那么此时两个温度读取线程就可以立即感知到环境温度的变化。</p>\n<h2 id=\"4-5-问题处理\"><a href=\"#4-5-问题处理\" class=\"headerlink\" title=\"4.5 问题处理\"></a>4.5 问题处理</h2><p>接下来我们就来讲解一下我们上述案例(引入原子性问题的案例)的解决方案。</p>\n<h3 id=\"4-5-1-锁机制\"><a href=\"#4-5-1-锁机制\" class=\"headerlink\" title=\"4.5.1 锁机制\"></a>4.5.1 锁机制</h3><p>我们可以给count++操作添加锁，那么count++操作就是临界区中的代码，临界区中的代码一次只能被一个线程去执行，所以count++就变成了原子操作。</p>\n<p>线程任务类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class VolatileAtomicThread implements Runnable &#123;\n\n    &#x2F;&#x2F; 定义一个int类型的变量,\n    private int count &#x3D; 0 ;\n\n    &#x2F;&#x2F; 定义一个Object类型的变量，该变量将作为同步代码块的锁\n    private Object obj &#x3D; new Object();\n\n    @Override\n    public void run() &#123;\n        \n        &#x2F;&#x2F; 对该变量进行++操作，100次\n        for(int x &#x3D; 0 ; x &lt; 100 ; x++) &#123;\n            synchronized (obj)&#123;\n                count++ ;\n                System.out.println(&quot;count &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; &quot; + count);\n            &#125;\n\n        &#125;\n        \n    &#125;\n\n&#125;</code></pre>\n\n<p>控制台输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">count &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; 9998\ncount &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; 9999\ncount &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; 10000</code></pre>\n\n<h3 id=\"4-5-2-原子类\"><a href=\"#4-5-2-原子类\" class=\"headerlink\" title=\"4.5.2 原子类\"></a>4.5.2 原子类</h3><h4 id=\"1-AtomicInteger\"><a href=\"#1-AtomicInteger\" class=\"headerlink\" title=\"1) AtomicInteger\"></a>1) AtomicInteger</h4><p>概述：java从JDK1.5开始提供了java.util.concurrent.atomic包(简称Atomic包)，这个包中的原子操作类提供了一种用法简单，性能高效，线程安全地更新一个变量的方式。因为变</p>\n<p>量的类型有很多种，所以在Atomic包里一共提供了13个类，属于4种类型的原子更新方式，分别是原子更新基本类型、原子更新数组、原子更新引用和原子更新属性(字段)。本次我们只讲解</p>\n<p>使用原子的方式更新基本类型，使用原子的方式更新基本类型Atomic包提供了以下3个类：</p>\n<p>AtomicBoolean： 原子更新布尔类型</p>\n<p>AtomicInteger： 原子更新整型</p>\n<p>AtomicLong：\t原子更新长整型</p>\n<p>以上3个类提供的方法几乎一模一样，所以本节仅以AtomicInteger为例进行讲解，AtomicInteger的常用方法如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public AtomicInteger()：\t   \t\t\t\t初始化一个默认值为0的原子型Integer\npublic AtomicInteger(int initialValue)： 初始化一个指定值的原子型Integer\n\nint get():   \t\t\t \t\t\t\t 获取值\nint getAndIncrement():      \t\t\t 以原子方式将当前值加1，注意，这里返回的是自增前的值。\nint incrementAndGet():     \t\t\t\t 以原子方式将当前值加1，注意，这里返回的是自增后的值。\nint addAndGet(int data):\t\t\t\t 以原子方式将输入的数值与实例中的值（AtomicInteger里的value）相加，并返回结果。\nint getAndSet(int value):   \t\t\t 以原子方式设置为newValue的值，并返回旧值。</code></pre>\n\n<p>案例演示AtomicInteger的基本使用：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class AtomicIntegerDemo01 &#123;\n\n    &#x2F;&#x2F; 原子型Integer\n    public static void main(String[] args) &#123;\n\n        &#x2F;&#x2F; 构造方法\n        &#x2F;&#x2F; public AtomicInteger()：初始化一个默认值为0的原子型Integer\n        &#x2F;&#x2F; AtomicInteger atomicInteger &#x3D; new AtomicInteger() ;\n        &#x2F;&#x2F; System.out.println(atomicInteger);\n\n        &#x2F;&#x2F; public AtomicInteger(int initialValue)： 初始化一个指定值的原子型Integer\n        AtomicInteger atomicInteger &#x3D; new AtomicInteger(5) ;\n        System.out.println(atomicInteger);\n\n        &#x2F;&#x2F; 获取值\n        System.out.println(atomicInteger.get());\n\n        &#x2F;&#x2F; 以原子方式将当前值加1，这里返回的是自增前的值\n        System.out.println(atomicInteger.getAndIncrement());\n        System.out.println(atomicInteger.get());\n\n        &#x2F;&#x2F; 以原子方式将当前值加1，这里返回的是自增后的值\n        System.out.println(atomicInteger.incrementAndGet());\n\n        &#x2F;&#x2F; 以原子方式将输入的数值与实例中的值（AtomicInteger里的value）相加，并返回结果\n        System.out.println(atomicInteger.addAndGet(8));\n\n        &#x2F;&#x2F; 以原子方式设置为newValue的值，并返回旧值\n        System.out.println(atomicInteger.getAndSet(20));\n        System.out.println(atomicInteger.get());\n\n    &#125;\n\n&#125;</code></pre>\n\n<h4 id=\"2-案例改造\"><a href=\"#2-案例改造\" class=\"headerlink\" title=\"2) 案例改造\"></a>2) 案例改造</h4><p>使用AtomicInteger对案例进行改造。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class VolatileAtomicThread implements Runnable &#123;\n\n    &#x2F;&#x2F; 定义一个int类型的变量\n    private AtomicInteger atomicInteger &#x3D; new AtomicInteger() ;\n\n    @Override\n    public void run() &#123;\n\n        &#x2F;&#x2F; 对该变量进行++操作，100次\n        for(int x &#x3D; 0 ; x &lt; 100 ; x++) &#123;\n            int i &#x3D; atomicInteger.incrementAndGet();\n            System.out.println(&quot;count &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; &quot; + i);\n        &#125;\n\n    &#125;\n\n&#125;</code></pre>\n\n<p>控制台输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">...\ncount &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; 9998\ncount &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; 9999\ncount &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; 10000</code></pre>\n\n<p>通过控制台的执行结果，我们可以看到最终得到的结果就是10000，因此也就证明AtomicInteger所提供的方法是原子性操作方法。</p>\n<h2 id=\"4-6-AtomicInteger原理\"><a href=\"#4-6-AtomicInteger原理\" class=\"headerlink\" title=\"4.6 AtomicInteger原理\"></a>4.6 AtomicInteger原理</h2><h3 id=\"4-6-1-原理介绍\"><a href=\"#4-6-1-原理介绍\" class=\"headerlink\" title=\"4.6.1 原理介绍\"></a>4.6.1 原理介绍</h3><p>AtomicInteger的本质：自旋锁 + CAS算法</p>\n<p>CAS的全成是： Compare And Swap(比较再交换); 是现代CPU广泛支持的一种对内存中的共享数据进行操作的一种特殊指令。CAS可以将read-modify-write转换为原子操作，这个原子操作</p>\n<p>直接由处理器保证。CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当旧预期值A和内存值V相同时，将内存值V修改为B并返回true，否则什么都不做，并返回false。</p>\n<p>举例说明：</p>\n<ol>\n<li>在内存值V当中，存储着值为10的变量。</li>\n</ol>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571817059527.png\" alt=\"1571817059527\">  </p>\n<ol start=\"2\">\n<li>此时线程1想要把变量的值增加1。对线程1来说，旧的预期值 A &#x3D; 10 ，要修改的新值 B &#x3D; 11。</li>\n</ol>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571817085047.png\" alt=\"1571817085047\"> </p>\n<ol start=\"3\">\n<li>在线程1要提交更新之前，另一个线程2抢先一步，把内存值V中的变量值率先更新成了11。</li>\n</ol>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571817628904.png\" alt=\"1571817628904\"> </p>\n<ol start=\"4\">\n<li>线程1开始提交更新，首先进行A和内存值V的实际值比较（Compare），发现A不等于V的值，提交失败。</li>\n</ol>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571818176635.png\" alt=\"1571818176635\"> </p>\n<ol start=\"5\">\n<li>线程1重新获取内存值V作为当前A的值，并重新计算想要修改的新值。此时对线程1来说，A &#x3D; 11，B &#x3D; 12。这个重新尝试的过程被称为<font color=\"red\" size=\"4\"><strong>自旋</strong></font>。</li>\n</ol>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571818465276.png\" alt=\"1571818465276\"> </p>\n<ol start=\"6\">\n<li>这一次比较幸运，没有其他线程改变V的值。线程1进行Compare，发现A和V的值是相等的。</li>\n</ol>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571818597998.png\" alt=\"1571818597998\"> </p>\n<ol start=\"7\">\n<li>线程1进行SWAP，把内存V的值替换为B，也就是12。</li>\n</ol>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571818747880.png\" alt=\"1571818747880\"> </p>\n<p>举例说明：这好比春节的时候抢火车票，下手快的会抢先买到票，而下手慢的可以再次尝试，直到买到票。</p>\n<h3 id=\"4-6-2-源码分析\"><a href=\"#4-6-2-源码分析\" class=\"headerlink\" title=\"4.6.2 源码分析\"></a>4.6.2 源码分析</h3><p>那么接下来我们就来查看一下AtomicInteger类中incrementAndGet方法的源码。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class AtomicInteger extends Number implements java.io.Serializable &#123;\n    \n    &#x2F;&#x2F; cas算法的实现类\n    private static final jdk.internal.misc.Unsafe U &#x3D; jdk.internal.misc.Unsafe.getUnsafe();\n    \n    &#x2F;&#x2F; 表示变量值在内存中的偏移量地址，unsafe类就是根据内存偏移量地址获取数据值。\n    private static final long VALUE &#x3D; U.objectFieldOffset(AtomicInteger.class, &quot;value&quot;);\n    private volatile int value;\n    \n    &#x2F;&#x2F; 以原子方式将当前值加1，这里返回的是自增后的值\n    public final int incrementAndGet() &#123;\n        \n        &#x2F;* this表示当前AtomicInteger对象 ，1表示要增加的值 *&#x2F;\n        return U.getAndAddInt(this, VALUE, 1) + 1;\t\t&#x2F;&#x2F; 调用Unsafe类中的getAndAddInt方法\n        \n    &#125;\n    \n&#125;</code></pre>\n\n<p>UnSafe类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public final class Unsafe &#123;\n    \n    &#x2F;&#x2F; Unsafe类中的getAndAddInt方法\n    public final int getAndAddInt(Object o, long offset, int delta) &#123;\n        \n        int v;\n        \n        &#x2F;&#x2F; do...while就是自旋操作,当CAS成功以后，循环结束\n        do &#123;\n            &#x2F;&#x2F; 获取AtomicInteger类中所封装的int类型的值，就相当于旧的预期值A\n            v &#x3D; getIntVolatile(o, offset); \n            \n            &#x2F;&#x2F; 调用本类的weakCompareAndSetInt方法实现比较在交换； o: AtomicInteger对象, v: 相当于旧的预期值A, v + delta：新值B\n        &#125; while (!weakCompareAndSetInt(o, offset, v, v + delta));\n        \n        return v;\n    &#125;\n    \n    &#x2F;&#x2F; Unsafe类中的weakCompareAndSetInt方法\n    public final boolean weakCompareAndSetInt(Object o, long offset, int expected, int x) &#123;\n        return compareAndSetInt(o, offset, expected, x);\n    &#125;\n\n    &#x2F;&#x2F; 本地方法，调用CPU指令实现CAS\n    public final native boolean compareAndSetInt(Object o, long offset, int expected, int x);\n    \n&#125;</code></pre>\n\n<h2 id=\"4-7-CAS与Synchronized\"><a href=\"#4-7-CAS与Synchronized\" class=\"headerlink\" title=\"4.7 CAS与Synchronized\"></a>4.7 CAS与Synchronized</h2><p>CAS和Synchronized都可以保证多线程环境下共享数据的安全性。那么他们两者有什么区别？</p>\n<p>Synchronized是从悲观的角度出发：</p>\n<p>总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（<strong>共享资源每次只给一个线程使用，其它线</strong></p>\n<p><strong>程阻塞，用完后再把资源转让给其它线程</strong>）。因此Synchronized我们也将其称之为悲观锁。jdk中的ReentrantLock也是一种悲观锁。</p>\n<p>CAS是从乐观的角度出发:</p>\n<p>总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据。CAS这种机制我们也可以将其称之为乐观锁。</p>\n<h1 id=\"5-并发工具类\"><a href=\"#5-并发工具类\" class=\"headerlink\" title=\"5 并发工具类\"></a>5 并发工具类</h1><p>在JDK的并发包里提供了几个非常有用的并发容器和并发工具类。供我们在多线程开发中进行使用。</p>\n<h2 id=\"5-1-ConcurrentHashMap\"><a href=\"#5-1-ConcurrentHashMap\" class=\"headerlink\" title=\"5.1 ConcurrentHashMap\"></a>5.1 ConcurrentHashMap</h2><h3 id=\"5-1-1-概述以及基本使用\"><a href=\"#5-1-1-概述以及基本使用\" class=\"headerlink\" title=\"5.1.1 概述以及基本使用\"></a>5.1.1 概述以及基本使用</h3><p>在集合类中HashMap是比较常用的集合对象，但是HashMap是线程不安全的(多线程环境下可能会存在问题)。为了保证数据的安全性我们可以使用Hashtable，但是Hashtable的效率低下。</p>\n<p>基于以上两个原因我们可以使用JDK1.5以后所提供的ConcurrentHashMap。</p>\n<p><font color=\"blue\" size=\"3\"><strong>案例1</strong></font>：演示HashMap线程不安全</p>\n<p>实现步骤</p>\n<ol>\n<li>创建一个HashMap集合对象</li>\n<li>创建两个线程对象，第一个线程对象向集合中添加元素(1-24),第二个线程对象向集合中添加元素(25-50);</li>\n<li>主线程休眠1秒，以便让其他两个线程将数据填装完毕</li>\n<li>从集合中找出键和值不相同的数据</li>\n</ol>\n<p>测试类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class HashMapDemo01 &#123;\n\n    public static void main(String[] args) &#123;\n\n        &#x2F;&#x2F; 创建一个HashMap集合对象\n        HashMap&lt;String , String&gt; hashMap &#x3D; new HashMap&lt;String , String&gt;() ;\n\n        &#x2F;&#x2F; 创建两个线程对象,我们本次使用匿名内部类的方式去常见线程对象\n        Thread t1 &#x3D; new Thread() &#123;\n\n            @Override\n            public void run() &#123;\n\n                &#x2F;&#x2F; 第一个线程对象向集合中添加元素(1-24)\n                for(int x &#x3D; 1 ; x &lt; 25 ; x++) &#123;\n                    hashMap.put(String.valueOf(x) , String.valueOf(x)) ;\n                &#125;\n\n            &#125;\n\n        &#125;;\n\n        &#x2F;&#x2F; 线程t2\n        Thread t2 &#x3D; new Thread() &#123;\n\n            @Override\n            public void run() &#123;\n\n                &#x2F;&#x2F; 第二个线程对象向集合中添加元素(25-50)\n                for(int x &#x3D; 25 ; x &lt; 51 ; x++) &#123;\n                    hashMap.put(String.valueOf(x) , String.valueOf(x)) ;\n                &#125;\n\n            &#125;\n\n        &#125;;\n\n        &#x2F;&#x2F; 启动线程\n        t1.start();\n        t2.start();\n\n        System.out.println(&quot;----------------------------------------------------------&quot;);\n\n        try &#123;\n\n            &#x2F;&#x2F; 主线程休眠2s，以便让其他两个线程将数据填装完毕\n            TimeUnit.SECONDS.sleep(2);\n\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n        &#125;\n\n        &#x2F;&#x2F; 从集合中找出键和值不相同的数据\n        for(int x &#x3D; 1 ; x &lt; 51 ; x++) &#123;\n\n            &#x2F;&#x2F; HashMap中的键就是当前循环变量的x这个数据的字符串表现形式 ， 根据键找到值，然后在进行判断\n            if( !String.valueOf(x).equals( hashMap.get(String.valueOf(x)) ) ) &#123;\n                System.out.println(String.valueOf(x) + &quot;:&quot; + hashMap.get(String.valueOf(x)));\n            &#125;\n\n        &#125;\n\n\n    &#125;\n\n&#125;</code></pre>\n\n<p>控制台输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">----------------------------------------------------------\n5:null</code></pre>\n\n<p>通过控制台的输出结果，我们可以看到在多线程操作HashMap的时候，可能会出现线程安全问题。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注1：需要多次运行才可以看到具体的效果; 可以使用循环将代码进行改造，以便让问题方便的暴露出来！</p></blockquote>\n<p><font color=\"blue\" size=\"3\"><strong>案例2</strong></font>：演示Hashtable线程安全</p>\n<p>测试类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class HashtableDemo01 &#123;\n\n    public static void main(String[] args) &#123;\n\n        &#x2F;&#x2F; 创建一个Hashtable集合对象\n        Hashtable&lt;String , String&gt; hashtable &#x3D; new Hashtable&lt;String , String&gt;() ;\n\n        &#x2F;&#x2F; 创建两个线程对象,我们本次使用匿名内部类的方式去常见线程对象\n        Thread t1 &#x3D; new Thread() &#123;\n\n            @Override\n            public void run() &#123;\n\n                &#x2F;&#x2F; 第一个线程对象向集合中添加元素(1-24)\n                for(int x &#x3D; 1 ; x &lt; 25 ; x++) &#123;\n                    hashtable.put(String.valueOf(x) , String.valueOf(x)) ;\n                &#125;\n\n            &#125;\n\n        &#125;;\n\n        &#x2F;&#x2F; 线程t2\n        Thread t2 &#x3D; new Thread() &#123;\n\n            @Override\n            public void run() &#123;\n\n                &#x2F;&#x2F; 第二个线程对象向集合中添加元素(25-50)\n                for(int x &#x3D; 25 ; x &lt; 51 ; x++) &#123;\n                    hashtable.put(String.valueOf(x) , String.valueOf(x)) ;\n                &#125;\n\n            &#125;\n\n        &#125;;\n\n        &#x2F;&#x2F; 启动线程\n        t1.start();\n        t2.start();\n\n        System.out.println(&quot;----------------------------------------------------------&quot;);\n\n        try &#123;\n\n            &#x2F;&#x2F; 主线程休眠2s，以便让其他两个线程将数据填装完毕\n            TimeUnit.SECONDS.sleep(2);\n\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n        &#125;\n\n        &#x2F;&#x2F; 从集合中找出键和值不相同的数据\n        for(int x &#x3D; 1 ; x &lt; 51 ; x++) &#123;\n\n            &#x2F;&#x2F; Hashtable中的键就是当前循环变量的x这个数据的字符串表现形式 ， 根据键找到值，然后在进行判断\n            if( !String.valueOf(x).equals( hashtable.get(String.valueOf(x)) ) ) &#123;\n                System.out.println(String.valueOf(x) + &quot;:&quot; + hashtable.get(String.valueOf(x)));\n            &#125;\n\n        &#125;\n        \n    &#125;\n\n&#125;</code></pre>\n\n<p>不论该程序运行多少次，都不会产生数据问题。因此也就证明Hashtable是线程安全的。</p>\n<p><font color=\"blue\" size=\"3\"><strong>Hashtable保证线程安全的原理</strong></font>：</p>\n<p>查看Hashtable的源码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Hashtable&lt;K,V&gt; extends Dictionary&lt;K,V&gt; implements Map&lt;K,V&gt;, Cloneable, java.io.Serializable &#123;\n    \n    &#x2F;&#x2F; Entry数组，一个Entry就相当于一个元素\n    private transient Entry&lt;?,?&gt;[] table;\n    \n    &#x2F;&#x2F; Entry类的定义\n    private static class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;\n        final int hash;\t\t&#x2F;&#x2F; 当前key的hash码值\n        final K key;\t\t&#x2F;&#x2F; 键\n        V value;\t\t\t&#x2F;&#x2F; 值\n        Entry&lt;K,V&gt; next;\t&#x2F;&#x2F; 下一个节点\n    &#125;\n    \n    &#x2F;&#x2F; 存储数据\n    public synchronized V put(K key, V value)&#123;...&#125;\n    \n    &#x2F;&#x2F; 获取数据\n    public synchronized V get(Object key)&#123;...&#125;\n    \n    &#x2F;&#x2F; 获取长度\n    public synchronized int size()&#123;...&#125;\n    \n    ...\n    \n&#125;</code></pre>\n\n<p>对应的结构如下图所示</p>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571905221097.png\" alt=\"1571905221097\"> </p>\n<p>Hashtable保证线程安全性的是使用方法全局锁进行实现的。在线程竞争激烈的情况下HashTable的效率非常低下。因为当一个线程访问HashTable的同步方法，其他线程也访问HashTable</p>\n<p>的同步方法时，会进入阻塞状态。如线程1使用put进行元素添加，线程2不但不能使用put方法添加元素，也不能使用get方法来获取元素，所以竞争越激烈效率越低。</p>\n<p><font color=\"blue\" size=\"3\"><strong>案例3</strong></font>：演示ConcurrentHashMap线程安全</p>\n<p>测试类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ConcurrentHashMapDemo01 &#123;\n\n    public static void main(String[] args) &#123;\n\n        &#x2F;&#x2F; 创建一个ConcurrentHashMap集合对象\n        ConcurrentHashMap&lt;String , String&gt; concurrentHashMap &#x3D; new ConcurrentHashMap&lt;String , String&gt;() ;\n\n        &#x2F;&#x2F; 创建两个线程对象,我们本次使用匿名内部类的方式去常见线程对象\n        Thread t1 &#x3D; new Thread() &#123;\n\n            @Override\n            public void run() &#123;\n\n                &#x2F;&#x2F; 第一个线程对象向集合中添加元素(1-24)\n                for(int x &#x3D; 1 ; x &lt; 25 ; x++) &#123;\n                    concurrentHashMap.put(String.valueOf(x) , String.valueOf(x)) ;\n                &#125;\n\n            &#125;\n\n        &#125;;\n\n        &#x2F;&#x2F; 线程t2\n        Thread t2 &#x3D; new Thread() &#123;\n\n            @Override\n            public void run() &#123;\n\n                &#x2F;&#x2F; 第二个线程对象向集合中添加元素(25-50)\n                for(int x &#x3D; 25 ; x &lt; 51 ; x++) &#123;\n                    concurrentHashMap.put(String.valueOf(x) , String.valueOf(x)) ;\n                &#125;\n\n            &#125;\n\n        &#125;;\n\n        &#x2F;&#x2F; 启动线程\n        t1.start();\n        t2.start();\n\n        System.out.println(&quot;----------------------------------------------------------&quot;);\n\n        try &#123;\n\n            &#x2F;&#x2F; 主线程休眠2s，以便让其他两个线程将数据填装完毕\n            TimeUnit.SECONDS.sleep(2);\n\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n        &#125;\n\n        &#x2F;&#x2F; 从集合中找出键和值不相同的数据\n        for(int x &#x3D; 1 ; x &lt; 51 ; x++) &#123;\n\n            &#x2F;&#x2F; concurrentHashMap中的键就是当前循环变量的x这个数据的字符串表现形式 ， 根据键找到值，然后在进行判断\n            if( !String.valueOf(x).equals( concurrentHashMap.get(String.valueOf(x)) ) ) &#123;\n                System.out.println(String.valueOf(x) + &quot;:&quot; + concurrentHashMap.get(String.valueOf(x)));\n            &#125;\n\n        &#125;\n\n    &#125;\n\n&#125;</code></pre>\n\n<p>不论该程序运行多少次，都不会产生数据问题。因此也就证明ConcurrentHashMap是线程安全的。</p>\n<h3 id=\"5-1-2-源码分析\"><a href=\"#5-1-2-源码分析\" class=\"headerlink\" title=\"5.1.2 源码分析\"></a>5.1.2 源码分析</h3><p>由于ConcurrentHashMap在jdk1.7和jdk1.8的时候实现原理不太相同，因此需要分别来讲解一下两个不同版本的实现原理。</p>\n<h4 id=\"1-jdk1-7版本\"><a href=\"#1-jdk1-7版本\" class=\"headerlink\" title=\"1) jdk1.7版本\"></a>1) jdk1.7版本</h4><p><font color=\"blue\" size=\"3\"><strong>ConcurrentHashMap中的重要成员变量</strong></font></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ConcurrentHashMap&lt;K, V&gt; extends AbstractMap&lt;K, V&gt; implements ConcurrentMap&lt;K, V&gt;, Serializable &#123;\n    \n    &#x2F;**\n     * Segment翻译中文为&quot;段&quot; , 段数组对象\n     *&#x2F;\n    final Segment&lt;K,V&gt;[] segments;\n    \n    &#x2F;&#x2F; Segment是一种可重入锁（ReentrantLock），在ConcurrentHashMap里扮演锁的角色，将一个大的table分割成多个小的table进行加锁。\n    static final class Segment&lt;K,V&gt; extends ReentrantLock implements Serializable &#123;\n        \n        transient volatile int count;    \t\t\t&#x2F;&#x2F; Segment中元素的数量，由volatile修饰，支持内存可见性；\n        transient int modCount;\t\t\t \t\t\t&#x2F;&#x2F; 对table的大小造成影响的操作的数量（比如put或者remove操作）;\n        transient int threshold;\t\t \t\t\t&#x2F;&#x2F; 扩容阈值;\n        transient volatile HashEntry&lt;K,V&gt;[] table;  &#x2F;&#x2F; 链表数组，数组中的每一个元素代表了一个链表的头部;\n        final float loadFactor;\t\t\t \t\t\t&#x2F;&#x2F; 负载因子 \n        \n    &#125;\n    \n    &#x2F;&#x2F; Segment中的元素是以HashEntry的形式存放在数组中的，其结构与普通HashMap的HashEntry基本一致，不同的是Segment的HashEntry，其value由\t\t     &#x2F;&#x2F; volatile修饰，以支持内存可见性，即写操作对其他读线程即时可见。\n    static final class HashEntry&lt;K,V&gt; &#123;\n        final int hash;\t\t\t\t\t&#x2F;&#x2F; 当前节点key对应的哈希码值\n        final K key;\t\t\t\t\t&#x2F;&#x2F; 存储键\n        volatile V value;\t\t\t\t&#x2F;&#x2F; 存储值\n        volatile HashEntry&lt;K,V&gt; next;\t&#x2F;&#x2F; 下一个节点\n    &#125;\n    \n&#125;</code></pre>\n\n<p>对应的结构如下图所示</p>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571880094854.png\" alt=\"1571880094854\">  </p>\n<p>简单来讲，就是ConcurrentHashMap比HashMap多了一次hash过程，第1次hash定位到Segment，第2次hash定位到HashEntry，然后链表搜索找到指定节点。在进行写操作时，只需锁住写</p>\n<p>元素所在的Segment即可(这种锁被称为<font size=\"3\" color=\"red\"><strong>分段锁</strong></font>)，其他Segment无需加锁，从而产生锁竞争的概率大大减小，提高了并发读写的效率。该种实现方式的缺点是hash过程比普通的HashMap要长</p>\n<p>(因为需要进行两次hash操作)。</p>\n<p><font color=\"blue\" size=\"3\"><strong>ConcurrentHashMap的put方法源码分析</strong></font></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ConcurrentHashMap&lt;K, V&gt; extends AbstractMap&lt;K, V&gt; implements ConcurrentMap&lt;K, V&gt;, Serializable &#123; \n    \n    public V put(K key, V value) &#123;\n        \n        &#x2F;&#x2F; 定义一个Segment对象\n        Segment&lt;K,V&gt; s;\n        \n        &#x2F;&#x2F; 如果value的值为空，那么抛出异常\n        if (value &#x3D;&#x3D; null) throw new NullPointerException();\n        \n        &#x2F;&#x2F; hash函数获取key的hashCode，然后做了一些处理\n        int hash &#x3D; hash(key);\n        \n        &#x2F;&#x2F; 通过key的hashCode定位segment\n        int j &#x3D; (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;\n        \n        &#x2F;&#x2F; 对定位的Segment进行判断，如果Segment为空，调用ensureSegment进行初始化操作(第一次hash定位)\n        if ((s &#x3D; (Segment&lt;K,V&gt;)UNSAFE.getObject(segments, (j &lt;&lt; SSHIFT) + SBASE)) &#x3D;&#x3D; null) \n            s &#x3D; ensureSegment(j);\n        \n        &#x2F;&#x2F; 调用Segment对象的put方法添加元素\n        return s.put(key, hash, value, false);\n    &#125;\n    \n    &#x2F;&#x2F; Segment是一种可ReentrantLock，在ConcurrentHashMap里扮演锁的角色，将一个大的table分割成多个小的table进行加锁。\n    static final class Segment&lt;K,V&gt; extends ReentrantLock implements Serializable &#123;\n        \n        &#x2F;&#x2F; 添加元素\n        final V put(K key, int hash, V value, boolean onlyIfAbsent) &#123;\n            \n            &#x2F;&#x2F; 尝试对该段进行加锁,如果加锁失败，则调用scanAndLockForPut方法;在该方法中就要进行再次尝试或者进行自旋等待\n            HashEntry&lt;K,V&gt; node &#x3D; tryLock() ? null : scanAndLockForPut(key, hash, value);\n            V oldValue;\n            try &#123;\n                \n                &#x2F;&#x2F; 获取HashEntry数组对象\n                HashEntry&lt;K,V&gt;[] tab &#x3D; table;\n                \n                &#x2F;&#x2F; 根据key的hashCode值计算索引(第二次hash定位)\n                int index &#x3D; (tab.length - 1) &amp; hash;\n                HashEntry&lt;K,V&gt; first &#x3D; entryAt(tab, index);\n                for (HashEntry&lt;K,V&gt; e &#x3D; first;;) \n                    \n                    &#x2F;&#x2F; 若不为null\n                    if (e !&#x3D; null) &#123;\n                        K k;\n                        \n                        &#x2F;&#x2F; 判读当前节点的key是否和链表头节点的key相同(依赖于hashCode方法和equals方法) \n                        &#x2F;&#x2F; 如果相同，值进行更新\n                        if ((k &#x3D; e.key) &#x3D;&#x3D; key || (e.hash &#x3D;&#x3D; hash &amp;&amp; key.equals(k))) &#123;\n                            oldValue &#x3D; e.value;\n                            if (!onlyIfAbsent) &#123;\n                                e.value &#x3D; value;\n                                ++modCount;\n                            &#125;\n                            break;\n                        &#125;\n                        \n                        e &#x3D; e.next;\n                    &#125; else &#123;  &#x2F;&#x2F; 若头结点为null\n                        \n                        &#x2F;&#x2F; 将新节点添加到链表中\n                        if (node !&#x3D; null) \n                            node.setNext(first);\n                        else\n                            node &#x3D; new HashEntry&lt;K,V&gt;(hash, key, value, first);\n                        int c &#x3D; count + 1;\n                        \n                        &#x2F;&#x2F; 如果超过阈值，则进行rehash操作\n                        if (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)\n                            rehash(node);\n                        else\n                            setEntryAt(tab, index, node);\n                        ++modCount;\n                        count &#x3D; c;\n                        oldValue &#x3D; null;\n                        break;\n                    &#125;\n                &#125;\n            &#125; finally &#123;\n                unlock();\n            &#125;\n        \n            return oldValue;\n        &#125; \t\n        \n    &#125;\n    \n&#125;\n</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注：源代码进行简单讲解即可(核心：进行了两次哈希定位以及加锁过程)</p></blockquote>\n<h4 id=\"2-jdk1-8版本\"><a href=\"#2-jdk1-8版本\" class=\"headerlink\" title=\"2) jdk1.8版本\"></a>2) jdk1.8版本</h4><p>在JDK1.8中为了进一步优化ConcurrentHashMap的性能，去掉了Segment分段锁的设计。在数据结构方面，则是跟HashMap一样，使用一个哈希表table数组。(数组 + 链表 + 红黑树) </p>\n<p>而线程安全方面是结合CAS机制 + 局部锁实现的，减低锁的粒度，提高性能。同时在HashMap的基础上，对哈希表table数组和链表节点的value，next指针等使用volatile来修饰，从而</p>\n<p>实现线程可见性。</p>\n<p><font color=\"blue\" size=\"3\"><strong>ConcurrentHashMap中的重要成员变量</strong></font></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ConcurrentHashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt; implements ConcurrentMap&lt;K,V&gt;, Serializable &#123;\n    \n    &#x2F;&#x2F; Node数组\n    transient volatile Node&lt;K,V&gt;[] table;\n    \n    &#x2F;&#x2F; Node类的定义\n    static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123; \n        \n        final int hash;\t\t\t\t&#x2F;&#x2F; 当前key的hashCode值\n        final K key;\t\t\t\t&#x2F;&#x2F; 键\n        volatile V val;\t\t\t\t&#x2F;&#x2F; 值\n        volatile Node&lt;K,V&gt; next;\t&#x2F;&#x2F; 下一个节点\n        \n    &#125;\n    \n    &#x2F;&#x2F; TreeNode类的定义\n    static final class TreeNode&lt;K,V&gt; extends Node&lt;K,V&gt; &#123;\n        TreeNode&lt;K,V&gt; parent;  &#x2F;&#x2F; 父节点\n        TreeNode&lt;K,V&gt; left;\t   &#x2F;&#x2F; 左子节点\n        TreeNode&lt;K,V&gt; right;   &#x2F;&#x2F; 右子节点\n        TreeNode&lt;K,V&gt; prev;    &#x2F;&#x2F; needed to unlink next upon deletion\n        boolean red;\t\t   &#x2F;&#x2F; 节点的颜色状态\n    &#125;\n    \n&#125;</code></pre>\n\n<p>对应的结构如下图</p>\n<p><img src=\"C:/Users/yp/Desktop/juc额外扩展资料/assets/1571901607504.png\" alt=\"1571901607504\"> </p>\n<p><font color=\"blue\" size=\"3\"><strong>ConcurrentHashMap的put方法源码分析</strong></font></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ConcurrentHashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt; implements ConcurrentMap&lt;K,V&gt;, Serializable &#123;\n    \n    &#x2F;&#x2F; 添加元素\n    public V put(K key, V value) &#123;\n    \treturn putVal(key, value, false);\n\t&#125;\n    \n    &#x2F;&#x2F; putVal方法定义\n    final V putVal(K key, V value, boolean onlyIfAbsent) &#123;\n        \n        &#x2F;&#x2F; key为null直接抛出异常\n        if (key &#x3D;&#x3D; null || value &#x3D;&#x3D; null) throw new NullPointerException();\n        \n        &#x2F;&#x2F; 计算key所对应的hashCode值\n        int hash &#x3D; spread(key.hashCode());\n        int binCount &#x3D; 0;\n        for (Node&lt;K,V&gt;[] tab &#x3D; table;;) &#123;\n            Node&lt;K,V&gt; f; int n, i, fh;\n            \n            &#x2F;&#x2F; 哈希表如果不存在，那么此时初始化哈希表\n            if (tab &#x3D;&#x3D; null || (n &#x3D; tab.length) &#x3D;&#x3D; 0)\n                tab &#x3D; initTable();\n            \n            &#x2F;&#x2F; 通过hash值计算key在table表中的索引，将其值赋值给变量i,然后根据索引找到对应的Node，如果Node为null,做出处理\n            else if ((f &#x3D; tabAt(tab, i &#x3D; (n - 1) &amp; hash)) &#x3D;&#x3D; null) &#123;\n                \n                &#x2F;&#x2F; 新增链表头结点，cas方式添加到哈希表table\n                if (casTabAt(tab, i, null, new Node&lt;K,V&gt;(hash, key, value, null))) break;                   \n            &#125;\n            else if ((fh &#x3D; f.hash) &#x3D;&#x3D; MOVED)\n                tab &#x3D; helpTransfer(tab, f);\n            else &#123;\n                V oldVal &#x3D; null;\n                \n                &#x2F;&#x2F; f为链表头结点，使用synchronized加锁\n                synchronized (f) &#123;\n                    if (tabAt(tab, i) &#x3D;&#x3D; f) &#123;\n                        if (fh &gt;&#x3D; 0) &#123;\n                            binCount &#x3D; 1;\n                            for (Node&lt;K,V&gt; e &#x3D; f;; ++binCount) &#123;\n                                K ek;\n                                \n                                &#x2F;&#x2F; 节点已经存在，更新value即可\n                                if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((ek &#x3D; e.key) &#x3D;&#x3D; key || (ek !&#x3D; null &amp;&amp; key.equals(ek)))) &#123;\n                                    oldVal &#x3D; e.val;\n                                    if (!onlyIfAbsent)\n                                        e.val &#x3D; value;\n                                    break;\n                                &#125;\n                                \n                                &#x2F;&#x2F; 该key对应的节点不存在,则新增节点并添加到该链表的末尾\n                                Node&lt;K,V&gt; pred &#x3D; e;\n                                if ((e &#x3D; e.next) &#x3D;&#x3D; null) &#123;\n                                    pred.next &#x3D; new Node&lt;K,V&gt;(hash, key, value, null);\n                                    break;\n                                &#125;\n                                \n                            &#125;\n                            \n                        &#125; else if (f instanceof TreeBin) &#123; &#x2F;&#x2F; 红黑树节点，则往该红黑树更新或添加该节点即可\n                            Node&lt;K,V&gt; p;\n                            binCount &#x3D; 2;\n                            if ((p &#x3D; ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key, value)) !&#x3D; null) &#123;\n                                oldVal &#x3D; p.val;\n                                if (!onlyIfAbsent)\n                                    p.val &#x3D; value;\n                            &#125;\n                        &#125;\n                    &#125;\n                &#125;\n                \n                &#x2F;&#x2F; 判断是否需要将链表转为红黑树\n                if (binCount !&#x3D; 0) &#123;\n                    if (binCount &gt;&#x3D; TREEIFY_THRESHOLD)\n                        treeifyBin(tab, i);\n                    if (oldVal !&#x3D; null)\n                        return oldVal;\n                    break;\n                &#125;\n            &#125;\n        &#125;\n        addCount(1L, binCount);\n        return null;\n    &#125;\n    \n    &#x2F;&#x2F; CAS算法的核心类\n    private static final sun.misc.Unsafe U;\n    static &#123;\n        try &#123;\n            U &#x3D; sun.misc.Unsafe.getUnsafe();\n            ...\n        &#125; catch (Exception e) &#123;\n            throw new Error(e);\n        &#125;\n    &#125;\n    \n    &#x2F;&#x2F; 原子获取链表节点\n    static final &lt;K,V&gt; Node&lt;K,V&gt; tabAt(Node&lt;K,V&gt;[] tab, int i) &#123;\n        return (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((long)i &lt;&lt; ASHIFT) + ABASE);\n    &#125;\n    \n    &#x2F;&#x2F; CAS更新或新增链表节点\n    static final &lt;K,V&gt; boolean casTabAt(Node&lt;K,V&gt;[] tab, int i, Node&lt;K,V&gt; c, Node&lt;K,V&gt; v) &#123;\n        return U.compareAndSwapObject(tab, ((long)i &lt;&lt; ASHIFT) + ABASE, c, v);\n    &#125;\n    \n&#125;</code></pre>\n\n\n\n<p>简单总结：</p>\n<ol>\n<li><p>如果当前需要put的key对应的链表在哈希表table中还不存在，即还没添加过该key的hash值对应的链表，则调用casTabAt方法，基于CAS机制来实现添加该链表头结点到哈希表</p>\n<p>table中，避免该线程在添加该链表头结的时候，其他线程也在添加的并发问题；如果CAS失败，则进行自旋，通过继续第2步的操作；</p>\n</li>\n<li><p>如果需要添加的链表已经存在哈希表table中，则通过tabAt方法，基于volatile机制，获取当前最新的链表头结点f，由于f指向的是ConcurrentHashMap的哈希表table的某条</p>\n<p>链表的头结点，故虽然f是临时变量，由于是引用共享的该链表头结点，所以可以使用synchronized关键字来同步多个线程对该链表的访问。在synchronized(f)同步块里面则是与</p>\n<p>HashMap一样遍历该链表，如果该key对应的链表节点已经存在，则更新，否则在链表的末尾新增该key对应的链表节点。</p>\n</li>\n</ol>\n<h2 id=\"5-2-CountDownLatch\"><a href=\"#5-2-CountDownLatch\" class=\"headerlink\" title=\"5.2 CountDownLatch\"></a>5.2 CountDownLatch</h2><p>CountDownLatch允许一个或多个线程等待其他线程完成操作以后，再执行当前线程；比如我们在主线程需要开启2个其他线程，当其他的线程执行完毕以后我们再去执行主线程，针对这</p>\n<p>个需求我们就可以使用CountDownLatch来进行实现。CountDownLatch中count down是倒着数数的意思；CountDownLatch是通过一个计数器来实现的，每当一个线程完成了自己的</p>\n<p>任务后，可以调用countDown()方法让计数器-1，当计数器到达0时，调用CountDownLatch的await()方法的线程阻塞状态解除，继续执行。</p>\n<p>CountDownLatch的相关方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public CountDownLatch(int count)\t\t\t\t\t\t&#x2F;&#x2F; 初始化一个指定计数器的CountDownLatch对象\npublic void await() throws InterruptedException\t\t\t&#x2F;&#x2F; 让当前线程等待\npublic void countDown()\t\t\t\t\t\t\t\t\t&#x2F;&#x2F; 计数器进行减1</code></pre>\n\n\n\n<p>案例演示：使用CountDownLatch完成上述需求(我们在主线程需要开启2个其他线程，当其他的线程执行完毕以后我们再去执行主线程)</p>\n<p>实现思路：在main方法中创建一个CountDownLatch对象，把这个对象作为作为参数传递给其他的两个任务线程</p>\n<p>线程任务类1</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class CountDownLatchThread01 implements Runnable &#123;\n\n    &#x2F;&#x2F; CountDownLatch类型成员变量\n    private CountDownLatch countDownLatch ;\n    public CountDownLatchThread01(CountDownLatch countDownLatch) &#123;      &#x2F;&#x2F; 构造方法的作用：接收CountDownLatch对象\n        this.countDownLatch &#x3D; countDownLatch ;\n    &#125;\n\n    @Override\n    public void run() &#123;\n\n        try &#123;\n            Thread.sleep(10000);\n            System.out.println(&quot;10秒以后执行了CountDownLatchThread01......&quot;);\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n        &#125;\n\n        &#x2F;&#x2F; 调用CountDownLatch对象的countDown方法对计数器进行-1操作\n        countDownLatch.countDown();\n\n    &#125;\n\n&#125;</code></pre>\n\n<p>线程任务类2</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class CountDownLatchThread02 implements Runnable &#123;\n\n    &#x2F;&#x2F; CountDownLatch类型成员变量\n    private CountDownLatch countDownLatch ;\n    public CountDownLatchThread02(CountDownLatch countDownLatch) &#123;      &#x2F;&#x2F; 构造方法的作用：接收CountDownLatch对象\n        this.countDownLatch &#x3D; countDownLatch ;\n    &#125;\n\n    @Override\n    public void run() &#123;\n\n        try &#123;\n            Thread.sleep(3000);\n            System.out.println(&quot;3秒以后执行了CountDownLatchThread02......&quot;);\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n        &#125;\n\n        &#x2F;&#x2F; 调用CountDownLatch对象的countDown方法对计数器进行-1操作\n        countDownLatch.countDown();\n\n    &#125;\n\n&#125;</code></pre>\n\n<p>测试类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class CountDownLatchDemo01 &#123;\n\n    public static void main(String[] args) &#123;\n\n        &#x2F;&#x2F;  1. 创建一个CountDownLatch对象\n        CountDownLatch countDownLatch &#x3D; new CountDownLatch(2) ;                 &#x2F;&#x2F; CountDownLatch中的计数器的默认值就是2\n\n        &#x2F;&#x2F;  2. 创建线程任务类对象，并且把这个CountDownLatch对象作为构造方法的参数进行传递\n        CountDownLatchThread01 countDownLatchThread01 &#x3D; new CountDownLatchThread01(countDownLatch) ;\n\n        &#x2F;&#x2F;  3. 创建线程任务类对象，并且把这个CountDownLatch对象作为构造方法的参数进行传递\n        CountDownLatchThread02 countDownLatchThread02 &#x3D; new CountDownLatchThread02(countDownLatch) ;\n\n        &#x2F;&#x2F;  4. 创建线程对象，并启动线程\n        Thread t1 &#x3D; new Thread(countDownLatchThread01);\n        Thread t2 &#x3D; new Thread(countDownLatchThread02);\n        t1.start();\n        t2.start();\n\n        &#x2F;&#x2F;  5. 在主线程中调用 CountDownLatch中的await让主线程处于阻塞状态\n        try &#123;\n            countDownLatch.await();\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n        &#125;\n\n        &#x2F;&#x2F;  6. 程序结束的输出\n        System.out.println(&quot;主线程执行了.... 程序结束了......&quot;);\n    &#125;\n\n&#125;</code></pre>\n\n<p>控制台输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">3秒以后执行了CountDownLatchThread02......\n10秒以后执行了CountDownLatchThread01......\n主线程执行了.... 程序结束了......</code></pre>\n\n<p>CountDownLatchThread02线程先执行完毕，此时计数器-1；CountDownLatchThread01线程执行完毕，此时计数器-1；当计数器的值为0的时候，主线程阻塞状态接触，主线程向下执行。</p>\n<h2 id=\"5-3-CyclicBarrier\"><a href=\"#5-3-CyclicBarrier\" class=\"headerlink\" title=\"5.3 CyclicBarrier\"></a>5.3 CyclicBarrier</h2><h3 id=\"5-3-1-概述以及基本使用\"><a href=\"#5-3-1-概述以及基本使用\" class=\"headerlink\" title=\"5.3.1 概述以及基本使用\"></a>5.3.1 概述以及基本使用</h3><p>CyclicBarrier的字面意思是可循环使用（Cyclic）的屏障（Barrier）。它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障</p>\n<p>才会开门，所有被屏障拦截的线程才会继续运行。</p>\n<p>例如：公司召集5名员工开会，等5名员工都到了，会议开始。我们创建5个员工线程，1个开会线程，几乎同时启动，使用CyclicBarrier保证5名员工线程全部执行后，再执行开会线程。</p>\n<p>CyclicBarrier的相关方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public CyclicBarrier(int parties, Runnable barrierAction)   &#x2F;&#x2F; 用于在线程到达屏障时，优先执行barrierAction，方便处理更复杂的业务场景\npublic int await()\t\t\t\t\t\t\t\t\t\t\t&#x2F;&#x2F; 每个线程调用await方法告诉CyclicBarrier我已经到达了屏障，然后当前线程被阻塞</code></pre>\n\n\n\n<p>案例演示：模拟员工开会</p>\n<p>实现步骤：</p>\n<ol>\n<li>创建一个员工线程类(EmployeeThread),该线程类中需要定义一个CyclicBarrier类型的形式参数</li>\n<li>创建一个开会线程类(MettingThread)</li>\n<li>测试类<ol>\n<li>创建CyclicBarrier对象</li>\n<li>创建5个EmployeeThread线程对象，把第一步创建的CyclicBarrier对象作为构造方法参数传递过来</li>\n<li>启动5个员工线程</li>\n</ol>\n</li>\n</ol>\n<p>员工线程类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class EmployeeThread extends Thread &#123;\n\n    &#x2F;&#x2F; CyclicBarrier类型的成员变量\n    private CyclicBarrier cyclicBarrier ;\n    public EmployeeThread(CyclicBarrier cyclicBarrier) &#123;        &#x2F;&#x2F; 使用构造方法对CyclicBarrier进行初始化\n        this.cyclicBarrier &#x3D; cyclicBarrier ;\n    &#125;\n\n    @Override\n    public void run() &#123;\n\n        try &#123;\n\n            &#x2F;&#x2F; 模拟开会人员的随机到场\n            Thread.sleep((int) (Math.random() * 1000));\n            System.out.println(Thread.currentThread().getName() + &quot; 到了! &quot;);\n            cyclicBarrier.await();\n        &#125; catch (Exception e) &#123;\n            e.printStackTrace();\n        &#125;\n\n    &#125;\n\n&#125;</code></pre>\n\n<p>开会线程类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class MettingThread extends Thread &#123;\n\n    @Override\n    public void run() &#123;\n        System.out.println(&quot;好了，人都到了，开始开会......&quot;);\n    &#125;\n\n&#125;</code></pre>\n\n<p>测试类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class CyclicBarrierDemo01 &#123;\n\n    public static void main(String[] args) &#123;\n\n        &#x2F;&#x2F; 创建CyclicBarrier对象\n        CyclicBarrier cyclicBarrier &#x3D; new CyclicBarrier(5 , new MettingThread()) ;\n\n        &#x2F;&#x2F; 创建5个EmployeeThread线程对象，把第一步创建的CyclicBarrier对象作为构造方法参数传递过来\n        EmployeeThread thread1 &#x3D; new EmployeeThread(cyclicBarrier) ;\n        EmployeeThread thread2 &#x3D; new EmployeeThread(cyclicBarrier) ;\n        EmployeeThread thread3 &#x3D; new EmployeeThread(cyclicBarrier) ;\n        EmployeeThread thread4 &#x3D; new EmployeeThread(cyclicBarrier) ;\n        EmployeeThread thread5 &#x3D; new EmployeeThread(cyclicBarrier) ;\n\n        &#x2F;&#x2F; 启动5个员工线程\n        thread1.start();\n        thread2.start();\n        thread3.start();\n        thread4.start();\n        thread5.start();\n\n    &#125;\n\n&#125;</code></pre>\n\n<h3 id=\"5-3-2-使用场景\"><a href=\"#5-3-2-使用场景\" class=\"headerlink\" title=\"5.3.2 使用场景\"></a>5.3.2 使用场景</h3><p>使用场景：CyclicBarrier可以用于多线程计算数据，最后合并计算结果的场景。</p>\n<p>比如：现在存在两个文件，这个两个文件中存储的是某一个员工两年的工资信息(一年一个文件)，现需要对这两个文件中的数据进行汇总；使用两个线程读取2个文件中的数据，当两个文</p>\n<p>件中的数据都读取完毕以后，进行数据的汇总操作。</p>\n<p>分析：要想在两个线程读取数据完毕以后进行数据的汇总，那么我们就需要定义一个任务类(该类需要实现Runnable接口)；两个线程读取完数据以后再进行数据的汇总，那么我们可以将</p>\n<p>​\t 两个线程读取到的数据先存储到一个集合中，而多线程环境下最常见的线程集合类就是ConcurrentHashMap，而这个集合需要被两个线程都可以进行使用，那么我们可以将这个集</p>\n<p>​\t 合作为我们任务类的成员变量，然后我们在这个任务类中去定义一个CyclicBarrier对象，然后在定义一个方法(count)，当调用这个count方法的时候需要去开启两个线程对象，</p>\n<p>​\t 使用这两个线程对象读取数据，把读取到的数据存储到ConcurrentHashMap对象，当一个线程读取数据完毕以后，调用CyclicBarrier的awit方法(告诉CyclicBarrier我已经</p>\n<p>​\t 到达了屏障)，然后在任务类的run方法对ConcurrentHashMap的数据进行汇总操作；</p>\n<p>实现步骤:</p>\n<ol>\n<li>定义一个任务类CyclicBarrierThreadUse(实现了Runnable接口)</li>\n<li>定义成员变量：CyclicBarrier ，ConcurrentHashMap</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">private CyclicBarrier cyclicBarrier &#x3D; new CyclicBarrier(2 , this) ;\nprivate ConcurrentHashMap&lt;Integer , String&gt; concurrentHashMap &#x3D; new ConcurrentHashMap&lt;Integer , String&gt;() ;</code></pre>\n\n<ol start=\"3\">\n<li>定义一个方法count方法，在count方法中开启两个线程对象(可以使用匿名内部类的方式实现)</li>\n<li>在run方法中对ConcurrentHashMap中的数据进行汇总</li>\n<li>编写测试类CyclicBarrierThreadUseDemo</li>\n<li>创建CyclicBarrierThreadUse对象，调用count方法</li>\n</ol>\n<p>任务类代代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class CyclicBarrierThreadUse implements Runnable &#123;\n\n    &#x2F;&#x2F; 当前我们两个线程到达了屏障点以后，我们需要立即对数据进行汇总, 因此我们需要使用第二个构造方法\n    &#x2F;&#x2F; 并且我们当前这个类就是一个任务类，因此我们可以直接传递参数this\n    private CyclicBarrier cyclicBarrier &#x3D; new CyclicBarrier(2 , this) ;\n    private ConcurrentHashMap&lt;Integer , String&gt; concurrentHashMap &#x3D; new ConcurrentHashMap&lt;Integer , String&gt;() ;  &#x2F;&#x2F; 存储两个线程所读取的数据\n\n    public void count() &#123;\n\n        &#x2F;&#x2F; 定义一个方法count方法，在count方法中开启两个线程对象(可以使用匿名内部类的方式实现)\n        &#x2F;&#x2F; 线程1\n        new Thread(new Runnable() &#123;\n\n            @Override\n            public void run() &#123;\n\n                &#x2F;&#x2F; 读取数据\n                BufferedReader bufferedReader &#x3D; null ;\n                try &#123;\n\n\n                    bufferedReader &#x3D; new BufferedReader(new FileReader(&quot;D:\\\\salary\\\\2017-salary.txt&quot;)) ;\n                    String line &#x3D; null ;\n                    while((line &#x3D; bufferedReader.readLine()) !&#x3D; null) &#123;\n                        concurrentHashMap.put(Integer.parseInt(line) , &quot;&quot;) ;            &#x2F;&#x2F; 小的问题，工资信息不能重复\n                    &#125;\n\n                &#125; catch (Exception e) &#123;\n                    e.printStackTrace();\n                &#125; finally &#123;\n                    if(bufferedReader !&#x3D; null) &#123;\n                        try &#123;\n                            bufferedReader.close();\n                        &#125; catch (IOException e) &#123;\n                            e.printStackTrace();\n                        &#125;\n                    &#125;\n                &#125;\n\n                &#x2F;&#x2F; 模拟任务的执行时间\n                try &#123;\n                    TimeUnit.SECONDS.sleep(5) ;\n                    System.out.println(Thread.currentThread().getName() + &quot;---------------------线程读取数据完毕....&quot;);\n                    cyclicBarrier.await() ;         &#x2F;&#x2F;通知cyclicBarrier当前线程已经到达了屏障点\n                &#125; catch (Exception e) &#123;\n                    e.printStackTrace();\n                &#125;\n\n\n            &#125;\n\n        &#125;).start();\n\n        &#x2F;&#x2F; 线程2\n        new Thread(new Runnable() &#123;\n\n            @Override\n            public void run() &#123;\n\n                &#x2F;&#x2F; 读取数据\n                BufferedReader bufferedReader &#x3D; null ;\n                try &#123;\n\n\n                    bufferedReader &#x3D; new BufferedReader(new FileReader(&quot;D:\\\\salary\\\\2019-salary.txt&quot;)) ;\n                    String line &#x3D; null ;\n                    while((line &#x3D; bufferedReader.readLine()) !&#x3D; null) &#123;\n                        concurrentHashMap.put(Integer.parseInt(line) , &quot;&quot;) ;            &#x2F;&#x2F; 小的问题，工资信息不能重复\n                    &#125;\n\n                &#125; catch (Exception e) &#123;\n                    e.printStackTrace();\n                &#125; finally &#123;\n                    if(bufferedReader !&#x3D; null) &#123;\n                        try &#123;\n                            bufferedReader.close();\n                        &#125; catch (IOException e) &#123;\n                            e.printStackTrace();\n                        &#125;\n                    &#125;\n                &#125;\n\n                &#x2F;&#x2F; 模拟任务的执行时间\n                try &#123;\n                    TimeUnit.SECONDS.sleep(10) ;\n                    System.out.println(Thread.currentThread().getName() + &quot;---------------------线程读取数据完毕....&quot;);\n                    cyclicBarrier.await() ;         &#x2F;&#x2F;通知cyclicBarrier当前线程已经到达了屏障点\n                &#125; catch (Exception e) &#123;\n                    e.printStackTrace();\n                &#125;\n\n\n            &#125;\n\n        &#125;).start();\n\n\n    &#125;\n\n    @Override\n    public void run() &#123;\n\n        &#x2F;&#x2F; 获取concurrentHashMap中的数据进行汇总\n        Enumeration&lt;Integer&gt; enumeration &#x3D; concurrentHashMap.keys();        &#x2F;&#x2F; 获取concurrentHashMap中所有的键\n\n        &#x2F;**\n         * 这个Enumeration的使用和我们之前所学习过的迭代器类似\n         * boolean hasMoreElements(); 判断集合中是否存在下一个元素\n         * E nextElement();           获取元素\n         *&#x2F;\n        int result &#x3D; 0 ;\n        while(enumeration.hasMoreElements()) &#123;\n            Integer integer &#x3D; enumeration.nextElement();\n            result +&#x3D; integer ;\n        &#125;\n\n        &#x2F;&#x2F; 输出\n        System.out.println(result);\n\n    &#125;\n\n\n&#125;</code></pre>\n\n<p>测试类代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class CyclicBarrierThreadUseDemo01 &#123;\n\n    public static void main(String[] args) &#123;\n\t\t\n        &#x2F;&#x2F; 创建任务类的对象\n        CyclicBarrierThreadUse cyclicBarrierThreadUse &#x3D; new CyclicBarrierThreadUse();\n        \n        &#x2F;&#x2F; 调用count方法进行数据汇总\n        cyclicBarrierThreadUse.count();\n\n    &#125;\n\n&#125;</code></pre>\n\n<h2 id=\"5-4-Semaphore\"><a href=\"#5-4-Semaphore\" class=\"headerlink\" title=\"5.4 Semaphore\"></a>5.4 Semaphore</h2><p>Semaphore字面意思是信号量的意思，它的作用是控制访问特定资源的线程数目。</p>\n<p>举例：现在有一个十字路口，有多辆汽车需要进经过这个十字路口，但是我们规定同时只能有两辆汽车经过。其他汽车处于等待状态，只要某一个汽车经过了这个十字路口，其他的汽车才可以经</p>\n<p>过，但是同时只能有两个汽车经过。如何限定经过这个十字路口车辆数目呢? 我们就可以使用Semaphore。</p>\n<p>Semaphore的常用方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public Semaphore(int permits)\t\t\t\t\t\tpermits 表示许可线程的数量\npublic void acquire() throws InterruptedException\t表示获取许可\npublic void release()\t\t\t\t\t\t\t\t表示释放许可</code></pre>\n\n\n\n<p>案例演示：模拟汽车通过十字路口</p>\n<p>实现步骤：</p>\n<ol>\n<li>创建一个汽车的线程任务类(CarThreadRunnable),在该类中定义一个Semaphore类型的成员变量</li>\n<li>创建测试类<ol>\n<li>创建线程任务类对象</li>\n<li>创建5个线程对象，并启动。(5个线程对象，相当于5辆汽车)</li>\n</ol>\n</li>\n</ol>\n<p>CarThreadRunnable类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class CarThreadRunnable implements Runnable &#123;\n\n    &#x2F;&#x2F; 创建一个Semaphore对象,限制只允许2个线程获取到许可证\n    private Semaphore semaphore &#x3D; new Semaphore(2) ;\n\n    @Override\n    public void run() &#123;                         &#x2F;&#x2F; 这个run只允许2个线程同时执行\n\n        try &#123;\n\n            &#x2F;&#x2F; 获取许可证\n            semaphore.acquire();\n            System.out.println(Thread.currentThread().getName() + &quot;-----&gt;&gt;正在经过十字路口&quot;);\n\n            &#x2F;&#x2F; 模拟车辆经过十字路口所需要的时间\n            Random random &#x3D; new Random();\n            int nextInt &#x3D; random.nextInt(7);\n            TimeUnit.SECONDS.sleep(nextInt);\n\n            System.out.println(Thread.currentThread().getName() + &quot;-----&gt;&gt;驶出十字路口&quot;);\n\n            &#x2F;&#x2F; 释放许可证\n            semaphore.release();\n\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n        &#125;\n\n    &#125;\n\n&#125;</code></pre>\n\n<p>测试类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class SemaphoreDemo01 &#123;\n\n    public static void main(String[] args) &#123;\n\n        &#x2F;&#x2F; 创建线程任务类对象\n        CarThreadRunnable carThreadRunnable &#x3D; new CarThreadRunnable() ;\n\n        &#x2F;&#x2F; 创建5个线程对象，并启动。\n        for(int x &#x3D; 0 ; x &lt; 5 ; x++) &#123;\n            new Thread(carThreadRunnable).start();\n        &#125;\n\n    &#125;\n\n&#125;</code></pre>\n\n<p>控制台输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Thread-0-----&gt;&gt;正在经过十字路口\nThread-1-----&gt;&gt;正在经过十字路口\nThread-1-----&gt;&gt;驶出十字路口\nThread-2-----&gt;&gt;正在经过十字路口\nThread-0-----&gt;&gt;驶出十字路口\nThread-3-----&gt;&gt;正在经过十字路口\nThread-2-----&gt;&gt;驶出十字路口\nThread-4-----&gt;&gt;正在经过十字路口\nThread-4-----&gt;&gt;驶出十字路口\nThread-3-----&gt;&gt;驶出十字路口</code></pre>\n\n<p>通过控制台输出，我们可以看到当某一个汽车”驶出”十字路口以后，就会有一个汽车立马驶入。</p>\n<h2 id=\"5-5-Exchanger\"><a href=\"#5-5-Exchanger\" class=\"headerlink\" title=\"5.5 Exchanger\"></a>5.5 Exchanger</h2><h3 id=\"5-5-1-概述以及基本使用\"><a href=\"#5-5-1-概述以及基本使用\" class=\"headerlink\" title=\"5.5.1 概述以及基本使用\"></a>5.5.1 概述以及基本使用</h3><p>Exchanger（交换者）是一个用于线程间协作的工具类。Exchanger用于进行线程间的数据交换。</p>\n<p>举例：比如男女双方结婚的时候，需要进行交换结婚戒指。</p>\n<p>Exchanger常用方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public Exchanger()\t\t\t\t\t\t\t&#x2F;&#x2F; 构造方法\npublic V exchange(V x)\t\t\t\t\t\t&#x2F;&#x2F; 进行交换数据的方法，参数x表示本方数据 ，返回值v表示对方数据</code></pre>\n\n<p>这两个线程通过exchange方法交换数据，如果第一个线程先执行exchange()方法，它会一直等待第二个线程也执行exchange方法，当两个线程都到达同步点时，这两个线程就可以交换数据，</p>\n<p>将本线程生产出来的数据传递给对方。</p>\n<p>案例演示：模拟交互结婚戒指</p>\n<p>实现步骤：</p>\n<ol>\n<li>创建一个男方的线程类(ManThread),定义一个Exchanger类型的成员变量</li>\n<li>创建一个女方的线程类(WomanThread),定义一个Exchanger类型的成员变量</li>\n<li>测试类<ol>\n<li>创建一个Exchanger对象</li>\n<li>创建一个ManThread对象，把第一步所创建的Exchanger作为构造方法参数传递过来</li>\n<li>创建一个WomanThread对象，把第一步所创建的Exchanger作为构造方法参数传递过来</li>\n<li>启动两个线程</li>\n</ol>\n</li>\n</ol>\n<p>ManThread类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ManThread extends Thread &#123;\n\n    &#x2F;&#x2F; 定义Exchanger类型的变量\n    private Exchanger&lt;String&gt; exchanger ;\n    private String name ;\n    public ManThread(Exchange&lt;String&gt; exchanger , String name) &#123;\n        super(name);\n        this.name &#x3D; name ;\n        this.exchanger &#x3D; exchanger ;\n    &#125;\n\n    @Override\n    public void run() &#123;\n\n        try &#123;\n            String result &#x3D; exchanger.exchange(&quot;钻戒&quot;);\n            System.out.println(name + &quot;----&gt;&gt;把钻戒给媳妇&quot;);\n            System.out.println(name + &quot;----&gt;&gt;得到媳妇给的&quot; + result);\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n        &#125;\n\n    &#125;\n\n&#125;</code></pre>\n\n<p>WomanThread类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class WomanThread extends Thread &#123;\n\n    &#x2F;&#x2F; 定义Exchanger类型的变量\n    private Exchanger&lt;String&gt; exchanger ;\n    private String name ;\n    public WomanThread(Exchanger&lt;String&gt; exchanger , String name) &#123;\n        super(name) ;\n        this.name &#x3D; name ;\n        this.exchanger &#x3D; exchanger ;\n    &#125;\n\n    @Override\n    public void run() &#123;\n\n        try &#123;\n            String result &#x3D; exchanger.exchange(&quot;铝戒&quot;);\n            System.out.println(name + &quot;----&gt;&gt;把铝戒给老公&quot;);\n            System.out.println(name + &quot;----&gt;&gt;得到老公给的&quot; + result);\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n        &#125;\n\n    &#125;\n&#125;</code></pre>\n\n<p>测试类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ExchangerDemo01 &#123;\n\n    public static void main(String[] args) &#123;\n\n        &#x2F;&#x2F; 创建一个Exchanger对象\n        Exchanger&lt;String&gt; exchanger &#x3D; new Exchanger&lt;String&gt;() ;\n\n        &#x2F;&#x2F; 创建一个ManThread对象\n        ManThread manThread &#x3D; new ManThread(exchanger , &quot;杨过&quot;) ;\n\n        &#x2F;&#x2F; 创建一个WomanThread对象\n        WomanThread womanThread &#x3D; new WomanThread(exchanger , &quot;小龙女&quot;) ;\n\n        &#x2F;&#x2F; 启动线程\n        manThread.start();\n        womanThread.start();\n\n    &#125;\n\n&#125;</code></pre>\n\n<h3 id=\"5-5-2-使用场景\"><a href=\"#5-5-2-使用场景\" class=\"headerlink\" title=\"5.5.2 使用场景\"></a>5.5.2 使用场景</h3><p>使用场景：可以做数据校对工作</p>\n<p>比如: 现在存在一个文件，该文件中存储的是某一个员工一年的工资信息，现需要将这个员工的工资信息录入到系统中，采用AB岗两人进行录入，录入到两个文件中，系统需要加载这两</p>\n<p>个文件，并对两个文件数据进行校对，看看是否录入一致，</p>\n<p>实现步骤：</p>\n<ol>\n<li>创建一个测试类(ExchangerUseDemo)</li>\n<li>通过匿名内部类的方法创建两个线程对象</li>\n<li>两个线程分别读取文件中的数据，然后将数据存储到各自的集合中</li>\n<li>当每一个线程读取完数据以后，就将数据交换给对方</li>\n<li>然后每个线程使用对方传递过来的数据与自己所录入的数据进行比对</li>\n</ol>\n<p>ExchangerUseDemo类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ExchangerUseDemo &#123;\n\n    public static void main(String[] args) &#123;\n\n        &#x2F;&#x2F; 1. 创建Exchanger对象\n        Exchanger&lt;ArrayList&lt;String&gt;&gt; exchanger &#x3D; new Exchanger&lt;ArrayList&lt;String&gt;&gt;() ;\n\n        &#x2F;&#x2F; 2. 通过匿名内部类的方法创建两个线程对象\n        new Thread(new Runnable() &#123;\n\n            @Override\n            public void run() &#123;\n\n\n                try &#123;\n\n                    &#x2F;&#x2F; 读取文件中的数据，然后将其存储到集合中\n                    ArrayList&lt;String&gt; arrayList &#x3D; new ArrayList&lt;String&gt;() ;\n                    BufferedReader bufferedReader &#x3D; new BufferedReader(new FileReader(&quot;D:\\\\salary\\\\2017-salary.txt&quot;)) ;\n                    String line &#x3D; null ;\n                    while((line &#x3D; bufferedReader.readLine()) !&#x3D; null) &#123;\n                        arrayList.add(line) ;\n                    &#125;\n\n                    &#x2F;&#x2F; arrayList.add(&quot;90000&quot;) ;\n                    &#x2F;&#x2F; arrayList.set(0 , &quot;90000&quot;) ;\n                    arrayList.remove(0) ;\n\n                    &#x2F;&#x2F; 调用Exchanger中的exchange方法完成数据的交换\n                    ArrayList&lt;String&gt; exchange &#x3D; exchanger.exchange(arrayList);\n\n                    &#x2F;&#x2F; 先比对长度\n                    if(arrayList.size() &#x3D;&#x3D; exchange.size()) &#123;\n\n                        &#x2F;&#x2F; 然后使用对方线程所传递过来的数据和自己线程所读取到的数据进行比对\n                        for(int x &#x3D; 0 ; x &lt; arrayList.size() ; x++) &#123;\n\n                            &#x2F;&#x2F; 本方数据\n                            String benfangElement &#x3D; arrayList.get(x);\n\n                            &#x2F;&#x2F; 对方数据\n                            String duifangElement &#x3D; exchange.get(x);\n\n                            &#x2F;&#x2F; 比对\n                            if(!benfangElement.equals(duifangElement)) &#123;\n                                System.out.println(&quot;数据存在问题.....&quot;);\n                            &#125;\n\n                        &#125;\n\n                    &#125;else  &#123;\n                        System.out.println(&quot;数据存在问题.....&quot;);\n                    &#125;\n\n                &#125; catch (Exception e) &#123;\n                    e.printStackTrace();\n                &#125;\n\n            &#125;\n\n        &#125;).start();\n\n        &#x2F;&#x2F; 线程2\n        new Thread(new Runnable() &#123;\n\n            @Override\n            public void run() &#123;\n\n\n                try &#123;\n\n                    &#x2F;&#x2F; 读取文件中的数据，然后将其存储到集合中\n                    ArrayList&lt;String&gt; arrayList &#x3D; new ArrayList&lt;String&gt;() ;\n                    BufferedReader bufferedReader &#x3D; new BufferedReader(new FileReader(&quot;D:\\\\salary\\\\2017-salary.txt&quot;)) ;\n                    String line &#x3D; null ;\n                    while((line &#x3D; bufferedReader.readLine()) !&#x3D; null) &#123;\n                        arrayList.add(line) ;\n                    &#125;\n\n                    &#x2F;&#x2F; 调用Exchanger中的exchange方法完成数据的交换\n                    ArrayList&lt;String&gt; exchange &#x3D; exchanger.exchange(arrayList);\n\n                    &#x2F;&#x2F; 先比对长度\n                    if(arrayList.size() &#x3D;&#x3D; exchange.size()) &#123;\n\n                        &#x2F;&#x2F; 然后使用对方线程所传递过来的数据和自己线程所读取到的数据进行比对\n                        for(int x &#x3D; 0 ; x &lt; arrayList.size() ; x++) &#123;\n\n                            &#x2F;&#x2F; 本方数据\n                            String benfangElement &#x3D; arrayList.get(x);\n\n                            &#x2F;&#x2F; 对方数据\n                            String duifangElement &#x3D; exchange.get(x);\n\n                            &#x2F;&#x2F; 比对\n                            if(!benfangElement.equals(duifangElement)) &#123;\n                                System.out.println(&quot;数据存在问题.....&quot;);\n                            &#125;\n\n                        &#125;\n\n                    &#125;else  &#123;\n                        System.out.println(&quot;数据存在问题.....&quot;);\n                    &#125;\n\n                &#125; catch (Exception e) &#123;\n                    e.printStackTrace();\n                &#125;\n\n            &#125;\n\n        &#125;).start();\n\n    &#125;\n\n&#125;</code></pre>\n","feature":true,"text":"1 线程状态1.1 状态介绍当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。线程对象在不同的时期有不同的状态。那么Java中的线程存在哪几种状态呢？Java中的线程 状态被定义在了java.lang.Thread.State枚举类中，State枚举...","link":"","photos":[],"count_time":{"symbolsCount":"91k","symbolsTime":"1:22"},"categories":[{"name":"Java后端","slug":"Java后端","count":5,"path":"api/categories/Java后端.json"}],"tags":[{"name":"Java","slug":"Java","count":3,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">1 线程状态</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-%E7%8A%B6%E6%80%81%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">1.1 状态介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-%E6%A1%88%E4%BE%8B%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">1.2 案例演示</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-1-%E6%A1%88%E4%BE%8B%E4%B8%80\"><span class=\"toc-text\">1.2.1 案例一</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-2-%E6%A1%88%E4%BE%8B%E4%BA%8C\"><span class=\"toc-text\">1.2.2 案例二</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-3-%E6%A1%88%E4%BE%8B%E4%B8%89\"><span class=\"toc-text\">1.2.3 案例三</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E7%BA%BF%E7%A8%8B%E6%B1%A0\"><span class=\"toc-text\">2 线程池</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">2.1 概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0\"><span class=\"toc-text\">2.2 自定义线程池</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-1-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">2.2.1 线程池的设计思路</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-2-%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">2.2.2 代码实现</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-JDK%E4%B8%AD%E7%BA%BF%E7%A8%8B%E6%B1%A0\"><span class=\"toc-text\">2.3 JDK中线程池</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-1-Executors\"><span class=\"toc-text\">2.3.1 Executors</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-2-ThreadPoolExecutor\"><span class=\"toc-text\">2.3.2 ThreadPoolExecutor</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">1) 基本使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">2) 工作原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%A1%88%E4%BE%8B%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">3) 案例演示</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E4%BB%BB%E5%8A%A1%E6%8B%92%E7%BB%9D%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">4) 任务拒绝策略</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-volatile%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">3 volatile关键字</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E7%9C%8B%E7%A8%8B%E5%BA%8F%E8%AF%B4%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">3.1 看程序说结果</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-JMM\"><span class=\"toc-text\">3.2 JMM</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90\"><span class=\"toc-text\">3.3 问题分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86\"><span class=\"toc-text\">3.4 问题处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-1-%E5%8A%A0%E9%94%81\"><span class=\"toc-text\">3.4.1 加锁</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-2-volatile%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">3.4.2 volatile关键字</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E5%8E%9F%E5%AD%90%E6%80%A7\"><span class=\"toc-text\">4 原子性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-%E7%9C%8B%E7%A8%8B%E5%BA%8F%E8%AF%B4%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">4.1 看程序说结果</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">4.2 问题分析说明</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-3-volatile%E5%8E%9F%E5%AD%90%E6%80%A7%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">4.3 volatile原子性测试</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-4-volatile%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">4.4 volatile使用场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-1-%E7%8A%B6%E6%80%81%E6%A0%87%E5%BF%97\"><span class=\"toc-text\">4.4.1 状态标志</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-2-%E7%8B%AC%E7%AB%8B%E8%A7%82%E5%AF%9F\"><span class=\"toc-text\">4.4.2 独立观察</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-5-%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86\"><span class=\"toc-text\">4.5 问题处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-5-1-%E9%94%81%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">4.5.1 锁机制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-5-2-%E5%8E%9F%E5%AD%90%E7%B1%BB\"><span class=\"toc-text\">4.5.2 原子类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-AtomicInteger\"><span class=\"toc-text\">1) AtomicInteger</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%A1%88%E4%BE%8B%E6%94%B9%E9%80%A0\"><span class=\"toc-text\">2) 案例改造</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-6-AtomicInteger%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">4.6 AtomicInteger原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-6-1-%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">4.6.1 原理介绍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-6-2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">4.6.2 源码分析</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-7-CAS%E4%B8%8ESynchronized\"><span class=\"toc-text\">4.7 CAS与Synchronized</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB\"><span class=\"toc-text\">5 并发工具类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-1-ConcurrentHashMap\"><span class=\"toc-text\">5.1 ConcurrentHashMap</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-1-%E6%A6%82%E8%BF%B0%E4%BB%A5%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">5.1.1 概述以及基本使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">5.1.2 源码分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-jdk1-7%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">1) jdk1.7版本</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-jdk1-8%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">2) jdk1.8版本</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-2-CountDownLatch\"><span class=\"toc-text\">5.2 CountDownLatch</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-3-CyclicBarrier\"><span class=\"toc-text\">5.3 CyclicBarrier</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-1-%E6%A6%82%E8%BF%B0%E4%BB%A5%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">5.3.1 概述以及基本使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-2-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">5.3.2 使用场景</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-4-Semaphore\"><span class=\"toc-text\">5.4 Semaphore</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-5-Exchanger\"><span class=\"toc-text\">5.5 Exchanger</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-5-1-%E6%A6%82%E8%BF%B0%E4%BB%A5%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">5.5.1 概述以及基本使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-5-2-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">5.5.2 使用场景</span></a></li></ol></li></ol></li></ol>","author":{"name":"啡鹏","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2023/03/14/b9c0245a1e08709e.webp","link":"/","description":"一个跑马拉松的程序员","socials":{"github":"https://github.com/yupeng0512/yupeng0512.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zuo-ye-chen-guang","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Java中的序列化和反序列化","uid":"1150b55b0c19da05733ad0e6d11f2075","slug":"Java中的序列化和反序列化","date":"2023-04-21T16:29:49.000Z","updated":"2023-04-27T09:40:34.038Z","comments":true,"path":"api/articles/Java中的序列化和反序列化.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2023/03/14/006c1f400197c149.webp","text":"Serializable接口和ObjectInputStream&#x2F;ObjectOutputStream类Serializable接口和ObjectInputStream&#x2F;ObjectOutputStream类是Java中最常用的序列化和反序列化方案。下面是一个...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"Java后端","slug":"Java后端","count":5,"path":"api/categories/Java后端.json"}],"tags":[{"name":"Java","slug":"Java","count":3,"path":"api/tags/Java.json"}],"author":{"name":"啡鹏","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2023/03/14/b9c0245a1e08709e.webp","link":"/","description":"一个跑马拉松的程序员","socials":{"github":"https://github.com/yupeng0512/yupeng0512.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zuo-ye-chen-guang","csdn":"","juejin":"","customs":{}}},"feature":true}}